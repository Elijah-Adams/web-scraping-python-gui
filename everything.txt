[
    {
        "name": "CS 6035: Introduction to Information Security",
        "href": "cs-6035-introduction-information-security",
        "text": " Overview Introduction to Information Security is a graduate-level introductory course in information security. It teaches the basic concepts and principles of information security and the fundamental approaches to secure computers and networks. Its main topics include: security basics; security management and risk assessment; software security; operating systems security; database security; cryptography algorithms and protocols; network authentication and secure network applications; malicious malware; network threats and defenses; web security; mobile security; legal and ethical issues; and privacy. Preview Current Syllabus Current syllabus Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Qualifications for taking this class adhere with the Admission Criteria given by Georgia Institute of Technology. Upon entering this class, it is assumed that students have completed an undergraduate degree in computer science or a related field. CS 6035 Relevant Technical Information: Basic Information Security Prerequisites Project and Technical Prerequisites Technical Requirements and Software Important Information for CS 6035 A few notes on Virtual Machines (VMs): Apple ARM-based SoCs are NOT supported in this course. Due to technical limitations, only an Intel-based VM is provided. You will be provided VMs in this class that were built using VirtualBox. This course DOES NOT support or test with any other virtualization software. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . Please refer to the CS 6035 Academic Honesty section of the current syllabus for further course specific information."
    },
    {
        "name": "CS 6150: Computing for Good",
        "href": "cs-6150-computing-good",
        "text": " Overview How can computing help make the world a better place? Can we avoid wars, alleviate homelessness and improve global health using computers? What are the technical challenges that arise and what humanistic issues have to be taken into account and understood in the process? In this C4G course, we explore problems faced by developing countries and underserved populations from a computing perspective. Examples of problem domains from past offerings include homelessness, mental illness, autism, migrant farm worker health, childhood blindness, and food security. The course will be project-centered with teams of students choosing project topics early in the semester and working towards a deployed solution by the end of the semester. Project topics may come from external partners - these partner organizations generally work on pressing social problems and provide services to communities and individuals in need. More details will be on the Canvas site, and linked from the course site, once ready. For more on the Computing-for-Good initiative, visit http://c4g.gatech.edu . This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. **CS 8903-C4G (Fall 2023)** CS 8903-C4G is an elective in Fall 2023 in the Online Master of Science in Computer Science (OMSCS) program. The course focuses on the development of projects for various nonprofits around the world. In CS 6150, student teams select project topics and create solutions; by contrast, in CS 8903-C4G, student teams select prior projects from CS 6150 upon which they will improve. CS 6150 and CS 8903-C4G are separate courses. Students may take CS 8903-C4G following CS 6150, or vice versa, as neither course is a prerequisite for the other. To request a slot in CS 8903-C4G, please contact Head TA Dante Ciolfi ( dantec@gatech.edu ). For information on registering for CS 8903-C4G, see this document . Course Goals The learning objectives of the course are: Learn to think about computing for social good and all its complexities. Undertake a significant, semester-long project working on a team: Identify a problem/project/organization that you are passionate about; design, evaluate and deploy a solution. Develop a rudimentary understanding of a domain of social importance. Develop an understanding of the key issues in humanitarian computing, including sustainability, resource availability (or lack thereof), novice user design, and diversity in user and stakeholder populations. Preview Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Spring 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge It is recommended that students taking this course have already completed graduate courses in at least TWO of the following topics:\u00a0(A) Databases (B) Networking (C) Logistics (D) Web development (E) Global Health (F) Technology and Society (G) User Interface Design. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6200: Introduction to Operating Systems ",
        "href": "cs-6200-introduction-operating-systems",
        "text": " Overview Introduction to Operating Systems is a graduate-level introductory course in operating systems. This course teaches basic operating system abstractions, mechanisms, and their implementations. The core of the course focuses on OS support for concurrency (threads) and synchronization, resource management (CPU, memory, I/O), and distributed services. The practical component of the course teaches multithread programming, inter-process communication, and distributed interactions via RPC. Preview Sample Syllabi Spring 2023 syllabus (PDF) Summer 2022 syllabus (PDF) Fall 2021 syllabus (PDF) Note:\u00a0sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge To undertake this course, you should have taken an undergraduate level course on, or be otherwise familiar with, basic hardware and software aspects of computer systems organization. You should also be familiar with the following: C and C++ programming experience Ubuntu 20.04 LTS (or similar Linux experience, such as working from the command line) Using Vagrant (with VirtualBox or an alternative). We also provide a Dockerfile for those with experience in using Docker. Using Makefiles Using GDB or an IDE with a debugger Using GCC or an IDE with gcc support Please review the CS 6200 Readiness Survey to determine your readiness to take this course. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome,\u00a0Firefox, or Edge is strongly recommended. 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system (64-bit OS for compatibility with 64-bit VMs): PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Note on M1 Macs: M1 Macs known limitations cause utilities like ptrace and address sanitizer (recommended for projects) to be terminated abruptly. Students are encouraged to use alternate platforms or utilities for projects. Linux: any recent distribution that has the supported browsers installed Virtual Machine: You will be provided a virtual machine (VM) useful for performing class assignments and projects. For the projects, the supplied resources are identical to those used to test your submissions. Details for downloading and installing the VM can be found in a pinned Piazza post. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6210: Advanced Operating Systems",
        "href": "cs-6210-advanced-operating-systems",
        "text": " Overview Advanced Operating Systems is a graduate-level course that addresses a broad range of topics in operating system design and implementation, including: Operating system structuring Synchronization, communication and scheduling in parallel systems Distributed systems, their communication mechanisms, distributed objects and middleware Failures and recovery management System support for Internet-scale computing By tracing the key ideas of today's most popular systems to their origins in research, the class highlights key developments in operating system design over the last two decades and illustrates how insight has evolved to implementation. Preview Sample Syllabi Spring 2023 syllabus and schedule (PDF) Spring 2021 syllabus and schedule (PDF) Spring 2020 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Students are expected to have completed an undergraduate OS course, or have industry experience. General knowledge of operating systems content will be assumed. To gain a better understanding of the prerequisite concepts necessary for success in this course, please take this brief diagnostic preparedness test . This test is for prospective students' personal purposes, to gauge readiness for this graduate-level Advanced Operating Systems course. Another resource for students to utilize in gauging preparedness is the CS 6210 Prerequisites and Concepts list . Please take the time to review the concepts in this document. If a student does not feel comfortable with the listed tasks, it may be beneficial to review this subject matter prior to registering for the course. CS 2200 offers a good preparation for the pre-requisites assumed in this course. To access Prof. Ramachandran's on-campus lecture recordings for CS 2200, visit the GT Computing Youtube channel for CS 2200 . Technical Requirements and Software Hardware Requirements You will need a machine which supports VT-X or AMD-V.\u00a0 i.e. machines that run on i3, i5 or, i7 and later Intel processors OR Athlon 64 X2, 64 FX and later for AMD processors.\u00a0Apple M1/M2 is currently not supported. You will need a minimum of 8GB RAM. Software Requirements Browser and connection speed: An up-to-date version of Chrome is required.\u00a0We use proctoring software Honorlock\u00a0for our examinations and it currently only supports Chrome. 2+ Mbps is recommended. Operating system: PC: Windows 10\u00a0or higher with latest updates installed Mac: OS X 10.9\u00a0or higher with latest updates installed.\u00a0We do not support M1/M2 Macs. Linux: any recent distribution that has the supported browsers installed MS Teams will be used for office hours. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6211: System Design for Cloud Computing",
        "href": "cs-6211-system-design-cloud-computing",
        "text": " Overview This is a hands on project-intensive immersive course aimed at senior-level undergraduates and graduate students to give them an in-depth experience in developing different layers of a cloud computing infrastructure including software defined networks, distributed runtime systems, network function virtualization, and application development. The course is organized into four project-driven modules (roughly equal duration): Software Defined Networks (SDN) Cloud System Software Network Function Virtualization Cloud Applications Each module is organized as discussion of the technical details pertaining to that topic (from selected readings from research papers and other online resources). Note that this course will have weekly 90-minute synchronous meetings that must be attended. More information is available on the CS 6211 course website . Sample Syllabus Spring 2021 syllabus Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students should have completed CS 6210 with a letter grade of A (or high B) or have taken an equivalent course elsewhere before taking this course. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6238: Secure Computer Systems",
        "href": "cs-6238-secure-computer-systems",
        "text": " Overview Applications and services are supported by software platforms such as operating systems and databases. Secure execution of such applications depends on the trust assumptions that can be made about these systems. By providing right mechanisms for protecting sensitive information and other resources, operating systems and databases can facilitate the development of secure applications. A uniform approach for exploring security support in operating systems and databases is attractive because both types of systems must offer similar mechanisms to mediate access to protected information. This course will take such an approach and it will explore problems such as authentication and access control that are traditionally handled at the system level. Students will also gain in depth understanding of the implementations of mechanisms that address these problems and security policies that can be supported by them. System level security issues in distributed systems will be covered as well. Course Goals After completing the course, the students should have the following capabilities: Demonstrate the need for a trusted computing base (TCB) and how it helps protect resources in a computer system. Analyze how hardware supported memory protection enables isolation of TCB and of untrusted programs. Develop, implement and evaluate authentication and access control in computer systems. Understand and evaluate security in distributed systems. Apply security concepts to protect data stored in database systems. Be familiar with recent research related to topics covered in class. Sample Syllabi Spring 2023 syllabus and schedule (PDF) Summer 2021 syllabus and schedule (PDF) Spring 2021 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge An undergraduate operating systems course (Georgia Tech's course CS 3210 Design of Operating Systems or equivalent). System programming experience with the C programming language is highly desirable. Programming experience with Python. Technical Requirements and Software High-speed Internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 4 GB of RAM Windows for PC computers OR Mac iOS for Apple computers Complete Microsoft Office Suite or comparable and ability to use Adobe PDF software (install, download, open and convert) Linux operating systems familiarity, including how system calls are used Virtualization software such as VirtualBox and ability to create and launch virtual machines Software development, compiling and debugging tools as required Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6250: Computer Networks",
        "href": "cs-6250-computer-networks",
        "text": " Overview This course provides a quick refresh of introductory material, and offers a broad coverage of protocols and algorithms that span across all layers of the Internet protocol stack. The course begins with an overview of the evolution of the Internet architecture and a short refresh of the transport layer algorithms and protocols such as TCP and congestion control. Next, the course will dive into intradomain/interdomain routing, peering and networks relationships with a follow-up into router design and functionalities. After discussing routing and router technologies, the course will continue with Software Defined Networking technologies and discuss topics that intersect Network Security and Computer Networks, for example, attacks on Internet routing such as BGP hijacking. Finally, the course wraps up with a discussion on multimedia applications and Content Delivery Networks. Throughout the course, students will work on hands-on projects to learn about routing, SDN, BGP hijacking, and Internet measurements. For students who would like to explore more, there is an additional project that engages with tools for Internet-wide measurements. As part of the project, students will study how large-scale events that are associated with unrest are reflected as connectivity disruptions for networks in specific parts of the world. Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge This class is appropriate for students with previous background in networking. Some familiarity with both network programming, scripting languages (e.g., Python), and using virtual machines will be helpful. If you can confidently answer \u201cyes\u201d to these questions, you should be fine: Can you explain the main distinction between TCP and UDP? Can you comfortably complete the Python tutorial and write basic programs in Python? Do you understand the three way handshake of TCP? Can you get files off of a virtual machine without a mapped directory? Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6260: Applied Cryptography",
        "href": "cs-6260-applied-cryptography",
        "text": " Overview A graduate-level introduction to modern cryptography, which focuses on the classical goals of cryptography, such as\u00a0data privacy,\u00a0authenticity\u00a0and\u00a0integrity. Course Goals You will learn various cryptographic schemes and how they are used in practice. For example, you will learn what AES, CBC, RSA, DSA, TLS stand for and how they \"work\". But the main objectives are more fundamental. The goals are to build the understanding of what \"secure\" is and how to evaluate and measure security. You will also learn how to compare security of various schemes, and how to select parameters to achieve required security guarantees. Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge No previous knowledge of cryptography is necessary. This course is about applying theory to practical problems, but it is still a\u00a0theory course. The main requirement is basic \"mathematical maturity\". You have to be able to read and write mathematical definitions, statements and proofs. It is expected that you were successful in your undergraduate discrete math class and took basic algorithms and computability/complexity theory classes. In particular, you have to know how to measure the running time of an algorithm and how to do proofs by contradiction and contraposition. You also have to know the basics of probability theory and modular arithmetic. You should also have familiarity with Python for the coding portions of the course. If you cannot recall what terms like permutation, sample space, random variable, conditional probability, big-O notation mean, you should consider taking the course in a later semester and refresh your knowledge of the above topics in the meanwhile. I recommend you review an undergraduate textbook on discrete math. All necessary elements of number theory will be presented during the course. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6262: Network Security",
        "href": "cs-6262-network-security",
        "text": " Overview Topics to be covered in CS 6262 include: Introduction and review of networking and security basics Large-scale attacks and impacts DDoS Malware-based attacks, phishing/frauds, underground economy/infrastructures Penetration testing and security assessments Basic techniques and tools Social engineering and human factors Security in Internet protocols: IP, TCP, DNS, and BGP Vulnerabilities in TCP/IP DNS cache poisoning and DNSSEC BGP Security Advanced web security Web security model Defenses against attacks on web applications HTTPS: goals and pitfalls Content security policies and web workers Advanced malware analysis Evasive malware, APT Mobile malware Advanced network monitoring Botnet detection (BotHunter and BotMiner) Internet-scale threat analysis Mapping the Internet, e.g., Z-map Domain/network reputation Bitcoins and crypto-currencies Basics of blockchains and bitcoins New/emerging technologies Big data and security Big data for security: applying machine learning to security analytics, e.g., building detection models Security of big data, in particular, adversarial machine learning: poisoning of input/training data and evasion of learned models Examples in malware analysis as well as web searches Cloud security \u201cProperty-preserving\u201d encryption: goals and pitfalls Oblivious RAM Virtual-machine security Attack-tolerant systems Secret-sharing Byzantine fault-tolerant systems Attack tolerance via diversification Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge It is recommended that you have taken CS 6035: Introduction to Information Security, or an equivalent class. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6263: Intro to\u00a0Cyber\u00a0Physical Systems Security",
        "href": "cs-6263-intro-cyber-physical-systems-security",
        "text": " Overview This course (formerly CS 8803 O07 Special Topics) provides an introduction to security issues relating to various cyber-physical systems including industrial control systems and those considered critical infrastructure systems. Topics include: Intro to the course Introduction to Cyber-Physical Systems Background on Networking, Information Security, and Control Theory Industrial Networks Industrial Cyber Security History and Threats Introduction to Industrial Control Systems And Operations Industrial Network Design and Architecture Industrial Network Protocols Example Industrial Control System - Power Delivery System Hacking Industrial Control Systems Securing Industrial Control Systems Advanced Cyber-Physical Systems Security Concepts Privacy in Cyber-Physical Systems Threats to Cyber-Physical Systems in Other Domains - (e.g., Transportation Systems) Sample Syllabi Spring 2024 syllabus Summer 2023 syllabus Spring 2023 syllabus Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6264: Information Security Lab -\u00a0System and Network Defenses",
        "href": "cs-6264-information-security-lab-system-and-network-defenses",
        "text": " Overview This course will help students develop both in-depth knowledge and hands-on skills in a number of important cybersecurity areas, including software security, malware and threat analysis, end-point security, network security, web security, mobile security, and machine learning based security analytics. The lecture materials of each topic area are drawn from latest research papers and\u00a0prototypes, and comprehensive projects are assigned to help students master each area. The main topics include: Software security: we will study software vulnerabilities such as memory safety errors and protection mechanisms such as CFI, ASLR, and DEP. We will also study program analysis techniques such as symbolic execution and fuzzing for finding software vulnerabilities and generate exploits. A project can involve applying and extending program analysis tools to find exploitable bugs in programs and generate input that can trigger these bugs. Malware analysis: we will study how to build a malware analysis environment that is both save and live. In particular, we will study how to analyze malware to find its triggering, or, dispatching behaviors, and configure a virtualized environment where that malware gets the input it needs so that it reveals its intended activities. We will also study threat analysis, in particular, how to obtain and share threat intelligence. A project can involve applying and extending a malware analysis system to examine the behaviors of a new malware family. End-point security: we will study how to monitor computer activities through system call hooking and virtual machine introspection. We will also study forensic analysis using systemwide record-and-replay technologies. A project can involve using a record-and-replay system to identify the root cause, or, the entry point, of a long-running attack. Network security, we will first review vulnerabilities of network protocols such as spoofing and standard prevention mechanisms such as TLS. We will then study network monitoring, including network intrusion detection and alert correlation. A project can involve extending an open-source intrusion detection system to detect stealthy network attacks. Web security: we will first review browser security models such as same-origin policy and content-security policy. We will then study more advanced topics including how to provide fine-grained access control to third-party scripts, and the security vulnerabilities of WebView. A project can involve implementing a phishing attack using iframes/popups in WebView and then implementing a defense. Mobile security: we will first review the iOS and Android security models. Then we will study Android malware and gray-ware, that is, those that leak user privacy. We will also discuss the attack ecosystem including rooting attacks and third-party app stores. A project can involve implementing an Android malware clustering algorithm that atomically classify Android malware and gray-ware. Machine learning for security analytics: we will first study how machine learning algorithms, in particular, deep learning, can be used to automatically produce security models such as malware classifiers and intrusion detection rules. We will then study how the machine learning process can be subverted by attackers and how to improve the robustness of machine learning. A project can involve using and extending an evaluation system to generate evasion attacks against a machine learning based model and produce the more robust model. Sample Syllabus Summer 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Spring 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation.\u200b Before Taking This Class... Suggested Background Knowledge You should have taken an introductory course on, or be otherwise familiar with, the basic concepts of information security (there is very little overlap between this course and CS 6035). Ideally, you should also have taken a network security course (there is only a small amount of overlap between this course and CS 6262). Prior programming experience with C or Java (or similar language) is required. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. 2+ Mbps is recommended. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution will work so long as you can install Python and OpenCV Virtual Machine: You will be provided a virtual machine (VM) useful for performing class assignments and projects. For the projects, the supplied resources are identical to those used to test your submissions. Details for downloading and installing the VM can be found on Canvas.\u200b Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6265: Information Security Lab",
        "href": "cs-6265-information-security-lab",
        "text": " Overview This course covers advanced techniques for writing exploits and patching vulnerabilities, taught through an intense, hands-on security laboratory. A significant part of this course involves solving Capture-The-Flag (CTF) and discussing strategies for solving such problems. This course covers a variety of topics including (but not limited to) reverse engineering, exploitation, binary analysis, and web. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Students will learn: Classes of security vulnerabilities How to exploit security vulnerabilities How to defend or mitigate security vulnerabilities Preview Sample Syllabi Summer 2023 syllabus and schedule (PDF) Summer 2022 syllabus and schedule (PDF) Spring 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Operating systems or equivalent (e.g., CS 3210 at GT). Technical Requirements and Software Internet connection (DSL, LAN, or cable connection desirable) Adobe Acrobat PDF reader (free download; see https://get.adobe.com/reader/ ) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6290: High Performance Computer Architecture",
        "href": "cs-6290-high-performance-computer-architecture",
        "text": " Overview This course covers modern computer architecture, including branch prediction, out-of-order instruction execution, cache optimizations, multi-level caches, memory and storage, cache coherence and consistency, and multi- and many-core processors. Course Goals After taking this course, students should be able to: Confidently discuss key ideas and elements of modern computer architectures, including branch prediction, out-of-order execution, cache optimizations, multi-level caches, memory, storage, reliability/availability, multi-core processors, cache coherence and consistency, and long-term and recent trends in computer architecture. Apply knowledge of these concepts during software design and development, to improve program performance, and during hardware architecture design, to create systems that are well suited for their intended purpose. Comprehend explanations of more advanced concepts, including those presented in research literature. Preview Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Undergraduate computer architecture course that covers basic computer organization Working knowledge of topics such as instruction sets, pipelining, etc. Familiarity with C/C++ and Linux, and confidence with making modifications to large programs (for the course project) If you answer \"no\" to any of the following questions, it may be beneficial to refresh your knowledge of the prerequisite material prior to taking CS 6290: Have you taken a computer organization course before? Are you familiar with at least one RISC instruction set and would you feel comfortable reading and writing small assembler programs? Are you familiar with basic computer architecture concepts, such as pipelines and caches? Are you familiar with C/C++ and would you be comfortable writing and/or modifying 100+ lines of code in a program that has over 100,000 lines of code? Are you comfortable with, or even excited about, learning how real processors work and using simulation to see how changes in processor design affect its performance? Technical Requirements and Software At least 32GB of available disk space and ability to install additional (free) software. For course projects, you will need to install the Oracle VirtualBox VM and run a Linux virtual machine that contains the setup for the project. Although it is possible to install the software for the projects natively in Linux, such a setup will not be supported. Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6291: Embedded Systems Optimization ",
        "href": "cs-6291-embedded-systems-optimization",
        "text": " Overview In the 21st century, embedded systems are the systems of future with cellular phones, smart-phones, and tablets becoming the dominant platforms for computing and communication. The ubiquity of information and the associated need for the computation that accompanies it is driving this revolution only to be accelerated by the new paradigms such as the Internet-of-Things (IoT). These platforms are clearly very different in terms of their processing requirements which are very unique: real-time needs, high performance but at low energy, compact-code and data segments, and most importantly ever-changing software stack. Such unique requirements have led to a complete redesign and reinvention of both hardware and the software stack from the ground up. For example, brand new processors such as ARM, DSPs, and network processors were invented, in addition to new virtual machines such as Dalvik, new operating systems such as Android, and new programming models and compiler optimizations. The goal of this course is to take a holistic view of the embedded system stack with a focus on processor architectures, instruction sets, and the associated advanced compiler optimizations that take advantage of the same. Following are the segments that will be covered in the course: Part I: Embedded Processor Architectures Introduction to instruction level parallelism: Pipelining, RISC vs CISC, Very Large Instruction Words (VLIW) instruction sets, Hardware complexity (Superscalars) vs Compiler Optimizations (VLIWs) Tradeoffs Design of Instruction Set Architectures: VLIW encoding, Exposing vs Hiding Architectural Details, RISC vs CISC ISAs, Opportunities for compilers, Dependences and Independences, Instruction bundling for VLIW, Compact instruction representation. Embedded Micro-architectures: Scratch-pad: software managed memory, clustered register files, special arithmetic, addressing modes for special needs (DSPs), branches in embedded domains: speculation and predication, unbundling branches Part II: Software Optimizations Introduction to Compiler phases: Overall working of the compiler, overview of phases, intermediate representation, backend code generation issues Register Allocation Foundation: RISC philosophy (load, store architecture), Live range analysis, Interference Graph, Graph Coloring Based Register Allocation, Live Range Splitting Register Allocation for Embedded Processors: Post-pass register allocation, Allocation gaps and register reuse, Energy reduction due to reduced memory accesses, Differential register allocation, Register encoding, Hardware support, Increase in exposed registers, Software pipelining and energy reduction Data Layouts for Embedded Processors: Auto addressing mode, Data layouts, Simple and general offset assignment problems, Address sequence optimizations, Memory coalescing, Data and code segment minimization Data and Code Compaction: X-Y memory, Parallelizing Load/Stores in DSPs, Data replication, Performance vs Data Segment/ size, ARM vs Thumb code generation, Mixed code generation, Frequent values in embedded programs and their encoding, Data cache optimization via compaction. Network Processors: Processing in the network, Network processors, Dual Bank Register Allocation for Network Processors, Multi-threading in network processors, Context switch and latency, Register allocation across threads to minimize latency Course Goals To understand the tight coupling and synergies that exist between hardware and software in embedded processors and that are exposed through the abstraction of instruction sets including DSPs, VLIWs, etc. To understand machine specific features (such as data paths, register and memory banks) of the underlying processor and machine specific code optimizations based on them for high performance, compact code and low energy. Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge It is recommended that students who take this course have previously taken at least an undergraduate-level course in computer architecture. In addition, students must have a strong background in C and/or C++. A basic to intermediate understanding of Python, and basic knowledge of\u00a0git, are\u00a0required. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. 2+ Mbps is recommended. Operating system: PC: Windows 7\u00a0or higher Mac: OS X 10.10.5\u00a0or higher Minimum of 2 GB free space Dual-core 2.4 GHz CPU or better Webcam resolution of 800x600 or better Working microphone Virtual Machine: You will be using Vagrant along with Virtualbox to provide a consistent environment for development and grading which every assignment uses. Details for downloading and installing the Vagrant system are located on the course github. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6300: Software Development Process",
        "href": "cs-6300-software-development-process",
        "text": " Overview This course provides an in-depth study of the process of developing software systems, including: the use of software processes in actual product development; techniques used to ensure quality of the software products; and maintenance tasks performed as software evolves. By the end of the course, students will understand the role of software processes in the development of software and will have experienced several types of processes, from rigid to agile. Students will also become familiar with a variety of modern technologies and development techniques and understand their connection to software processes. Preview Course overview Sample Lesson Sample Syllabus Current syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class Suggested Background Knowledge Students should be familiar with Java and with basic software engineering concepts. Students are also expected to have taken an undergraduate software engineering course or have some experience in industry. If you answer \"no\" to any of the following questions, it may be beneficial to refresh your knowledge of this material prior to taking CS 6300: Have you taken a software engineering course before or have you had some experience working as a software engineer in a company? Are you familiar with basic software engineering concepts, such as requirements, software design, and software testing? Are you familiar with the Java language? (Knowing another object-oriented language, such as C++ or C#, may be enough, but please keep in mind that all assignments and projects are Java-based.) Are you comfortable, or even excited about, learning new technologies and working with software tools? Do you have enough flexibility to work with a team that meets (remotely) on a regular basis? Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Ability to install additional (free) software, such as the Eclipse Integrated Development Environment, on the machine used for the course. Google Hangouts will be used for office hours. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6310: Software Architecture and Design",
        "href": "cs-6310-software-architecture-and-design",
        "text": " Overview Software Architecture and Design will provide students with the principles and concepts involved in the analysis and design of large software systems. The learning objectives for the course are the following: Understand and apply object-oriented design techniques Develop and evaluate software architectures Select and use appropriate architectural styles Select and use appropriate software design patterns Express the specifications and design of an application using UML [Time Permitting] Discuss related issues (e.g., formal design language with OCL) Course Goals This course teaches the principles and concepts involved in the analysis and design of large software systems. After completing this course, a student should have obtained the skills and knowledge necessary to accomplish the following: Express the analysis and design of an application using UML Specify functional semantics of an application using OCL Specify and evaluate software architectures Select and use appropriate architectural styles Understand and apply object-oriented design techniques Select and use appropriate software design patterns Understand and perform a design review Sample Syllabi Summer 2023 syllabus and schedule (PDF) Spring 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge To undertake this course you should either have successfully taken an undergraduate software engineering course or CS 6300. Alternatively, if you have significant experience actually developing industrial software, you should be fine. You will be required to implement some of your designs using Java, so this course assumes competence with Java programming and knowledge of object-oriented techniques. There are videos available on the class resources page to refresh your knowledge of these two topics. If you answer \"no\" to any of the following questions, it may be beneficial to refresh your knowledge of this material prior to taking CS 6310: Have you taken a software engineering course before or have you had some experience working as a software engineer in a company? Are you familiar with basic software engineering concepts, such as requirements, software design, and software testing? Are you familiar with at least one object-oriented programming language, preferably Java? Are you comfortable, or even excited about, learning new technologies and working with software tools? Do you have enough flexibility to work with a team that meets (remotely) on a regular basis? Technical Requirements and Software You will be provided a virtual container to setup locally and\u00a0use while in this course. In addition, you are expected to have screen and voice capture software available to you for submitting demo materials. The class resources page provides suggested tools. Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Though the absolute minimum requirements are shown above, we highly recommend that you use an Operating System and Web Browser that are relatively recent, to ensure that your experience while working with the various software applications in the course (e.g., Integrated Development Environments, Virtual Machines) is as smooth as possible. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6340: Software Analysis",
        "href": "cs-6340-software-analysis",
        "text": " Overview Have you ever wondered how your development environment can determine that you have an unused variable before you compiled the code? How do strongly-typed programming languages prevent bugs in your code? How can we be ahead of our users in finding bugs in complicated systems that may not have been caught by our testing efforts? In this class, we will explore these topics along with several others that together make up the field of software analysis. The point of software analysis is to determine whether software is correct. Today, the cost of software development is less than 50% programming, with testing, debugging, security assessments, and similar tasks taking more resources than developing the software itself. As a result, there is an increasing focus in the software industry on using tools to write better software. These tools can take the form of testing tools that help find bugs but they can also take the form of analysis techniques that have the goal of building a stronger code foundation with fewer areas where defects can emerge, the end result being less risk in the software development lifecycle. In this class, we will investigate multiple techniques for analyzing software and the limits of what software analysis can tell us. Each lesson covers a different area of software analysis and many lessons have a corresponding lab where you will gain hands-on experience with the technique covered in the lecture. The labs will evaluate your practical use of the techniques, while the exams will evaluate your understanding of the lessons not covered by labs and also the theories of software analysis techniques. Applications of techniques covered in this class relate to performance, cyber security, testing, and debugging. In this course, you will study the underlying principles of software analysis and these approaches, and gain hands-on experience applying them to automate testing software and finding bugs in complex, real-world programs. You will explore techniques including dataflow analysis, constraint-based analysis, type systems, automated test case generation, symbolic execution, and more. While testing is frequently part of software analysis, the approach to software testing presented in this class is directly tied to analysis and is frequently different than the testing usually performed as part of quality assurance in a typical software development lifecycle. More information is available on the CS 6340 course website . Course Goals After successfully completing the course, you will be able to do the following: Evaluate the suitability of different analysis and testing techniques for different types of programs and under a given set of constraints Implement and run analyses to determine useful facts about a given program Describe qualitative properties of different techniques for analyzing and testing programs Compute the outcome of a given analysis or testing technique on a program Preview Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge We expect you to be fluent in a C-family language, such as C, C++, Java, or C#. Most classwork will be in C++, and the effort required will be greatly increased if you are not already fluent in a C-family language. In this course, you will use a variety of tools implemented in different programming languages to generate useful facts about a program\u2019s behavior and analyze them. You will learn about the tools and their theoretical underpinnings in this class, however it is assumed that you are already familiar with basic concepts in computer science and mathematics, as well as the use of various tools/command in a UNIX-like environment. The instructors and teaching assistants have only a limited capability to assist students with learning these tasks, and they will not be explicitly covered in video lessons. We have created a Readiness Assessment that you can use to determine prerequisite tasks that you may wish to learn or re-familiarize yourself with before enrolling in this course. Technical Requirements and Software Georgia Tech's Office of Student Computer Ownership issues minimum hardware requirements to incoming undergraduates; you should meet or exceed these guidelines. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6400: Database Systems Concepts and Design",
        "href": "cs-6400-database-systems-concepts-and-design",
        "text": " Overview We believe in learning-by-example and learning-by-doing. This course presents an example of applying a database application development methodology to a major real-world project. All the database concepts, techniques, and tools that are needed to develop a database application from scratch are introduced along the way when they are needed. In parallel - slightly delayed - learners in the course will apply the database application development methodology, techniques, and tools to their own major class team project. Students will also learn the Extended Entity Relationship Model, the Relational Model, Relational algebra, calculus and SQL, database normalization, efficiency, and indexing. Finally, techniques and tools for metadata management and archival will be presented. Sample Syllabi Spring 2024 syllabus (PDF) Fall 2022 syllabus (PDF) Summer 2021 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Learners should be familiar with at least one scripting or programming language, e.g., PHP, Python, Java. Some familiarity with software engineering concepts and Git/source control will be helpful. Willingness to learn basic system administration tasks is necessary. Flexibility and readiness to work remotely with team members is a must. Technical Requirements and Software See the College of Computing's technical requirements .\u200b Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6440: Intro to Health Informatics",
        "href": "cs-6440-intro-health-informatics",
        "text": " Overview Introduction to Health Informatics (CS 6440) is designed so that students with a variety of backgrounds can gain basic proficiency in health informatics. Health informatics encompasses the application of computing to: healthcare delivery; population and public health; community-based clinical research; and the potential for big data and analytics to transform the field. This is distinct from the related field of bioinformatics, which explores the role of computing in understanding the genomic and proteomic processes within cells. During CS 6440, students will explore health information technology through working with lab assignments and a practicum project designed to provide a hands-on experience with state-of-the-art health informatics tools and systems. Topics include health terminologies, HL7 FHIR, SMARTonFHIR, the OMOP Common Data Model, OHDSI Atlas, and more!. They will apply the knowledge and skills they learn to work individually or with a team of their classmates on a real-world clinical challenge. Sample Syllabus Sample syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge Students must have a basic computer science background and be proficient in modern programming languages. Most of the tools utilized in the course are Java or Python based, with one lab working in TypeScript using React. All lab code is simplified and does not require advanced knowledge in one particular programming language, with the focus on the healthcare applications and data standards. Labs and tools may utilize Docker for deployment, though advance knowledge is not required. Team projects can vary significantly, with students often allowed to work in their strengths or learn new libraries/frameworks (e.g., React, Angular, Python APIs, etc.). While not required, familiarity with web application deployment may be beneficial for projects. No previous knowledge of health informatics is required. Any student qualified enough to be admitted to OMSCS\u2014and willing to put in the necessary time for course work\u2014should be prepared for this course. Major Languages and Tools: Java, Python, JavaScript/TypeScript, React, Docker Technical Requirements and Software Georgia Tech's Office of Student Computer Ownership issues minimum hardware requirements to incoming undergraduates; you should meet or exceed these guidelines. Please be aware that the course may not be able to fully accommodate issues with student hardware or specific environmental issues. Students will be responsible for addressing such issues or locating a suitable device. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6457: Video Game Design",
        "href": "cs-6457-video-game-design",
        "text": " Overview Welcome to CS6457 Video Game Design. The course covers many game design topics including game engine concepts and technologies, structural elements of games, and game design process. CS6457 is a project-based course and includes both individual assignments as well as a group project. Learning objectives are focused primarily on creating fully three-dimensional games with real time game object control. This includes games that meet the criteria of Game Feel such as Super Mario 64. Preview Check out the demo reels from Spring 2022 below! Sample Syllabus Summer 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students are not expected to be familiar with the Unity Engine. Outside of C# experience, familiarity with a strongly typed object-oriented programming language such as Java is helpful. Useful prerequisite knowledge for the course includes linear algebra and computer graphics basics. Understanding of affine transformations of homogeneous coordinates, transformation order, quaternions, 3D projection, matrix stacks, scene graphs, graphics lighting models such as the Phong reflection model, are all relevant. Technical Requirements and Software All software development is performed with the Unity Engine and the C# programming language. Students need a Windows PC or Mac capable of running Unity. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6460: Educational Technology",
        "href": "cs-6460-educational-technology",
        "text": " Overview CS 6460: Educational Technology will be a heavily project-based class in which students will: deeply investigate the tools, methods, and theories behind educational technology; demonstrate mastery of a subset of the field; propose either implementing a tool for or conducting research in educational technology; and deliver a final project along with a presentation and publication-ready paper. Just as the on-campus course has no lectures, so also the online course will not be lecture-based; instead, the course will be based on a curated library of materials, such as academic publications, media articles, existing tools, past projects, original interviews with experts in the field. Students in the class will navigate and investigate the topics most pertinent to their interests and project ideas, as well as contribute to the library for future classes. As part of this, TAs, acting more as mentors, will work closely with small groups of students to develop their understanding and ideas, scope their plans, and deliver a final project. The ultimate goal is that these projects will lead to academic publications, start-up businesses, ongoing research projects, or tools to use in the OMSCS program. More information is available on the CS 6460 course website . Preview Sample Syllabus Summer 2020 syllabus and schedule Fall 2019 syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge To be ready for the class, students should have completed their program foundational requirement in order to have experience on the receiving end of educational technology. Students should also be comfortable with writing a handful of essays, participating in group activities and discussions, and tackling a large-scale individual or group project. To succeed in this course, you should be able to answer \u201cyes\u201d to the following questions: Have you completed the program's foundational requirement? (While not required, answering 'yes' guarantees you'll have examples of educational technology to think about in the course.) Are you comfortable with a class where participation is assessed directly? Are you comfortable with a class that involves a significant amount of essay writing? Are you comfortable either in a group on a project, or taking on a significantly-sized project individually? Are you passionate about education or educational technology? Do you already have some vague ideas of the kinds of things you'd like to research or build? Are you comfortable with a very open-ended class, where learning is largely student-driven? Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6475: Computational Photography",
        "href": "cs-6475-computational-photography",
        "text": " Overview This class explores how computation impacts the entire workflow of photography, which is traditionally aimed at capturing light from a (3D) scene to form a (2D) image. A detailed study of the perceptual, technical and computational aspects of forming pictures, and more precisely, the capture and depiction of reality on a (mostly 2D) medium of images, is undertaken over the entire term. The scientific, perceptual, and artistic principles behind image-making will be emphasized, especially as impacted and changed by computation. Topics include the relationship between pictorial techniques and the human visual system; intrinsic limitations of 2D representations and their possible compensations; and technical issues involving capturing light to form images. Technical aspects of image capture and rendering, and exploration of how such a medium can be used to its maximum potential, will be examined. New forms of cameras and imaging paradigms will be introduced. Students will undertake a hands-on approach over the entire term using computation techniques, merged with digital imaging processes to produce photographic artifacts. More information is available on the CS 6475\u00a0course website . Course Goals This class explores how computation impacts the entire workflow of photography, which is traditionally aimed at capturing light from a (3D) scene to form an (2D) image. Over the span of the semester, students will learn: To think about images as multi-dimensional arrays on which mathematical operations can be performed to generate interesting artifacts The technical aspects of image capture and rendering, and exploration of how such a medium can be used to its maximum potential To mathematically model a camera as a device that maps a 3D space onto a 2D plane How the traditional camera pipeline can be transformed by changing the sensor, illumination, lens, etc. Preview Sample Syllabi Current syllabus Current schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge The course will involve programming assignments and projects that will test the student\u2019s understanding of the concepts taught in class. The following will be necessary to keep up with the pace of the course: W orking knowledge of computer programming (preferably Python) College-level mathematics (knowledge of matrices, vectors, differentiation, and integration) Physics (vectors, optics) Probability (probability density functions) Basic knowledge about the functioning of a camera (controlling shutter speed, ISO, aperture) Prior experience with using OpenCV and Numpy is preferable Technical Requirements and Software Internet connectivity Camera (preferably one with granular control over aperture, shutter speed, and ISO) Operating system: PC: Windows 8 or higher Mac: OS X 10.15\u00a0or higher with latest updates installed Linux: any recent distribution will work so long as you can install Python and OpenCV bindings Anaconda Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6476: Computer Vision",
        "href": "cs-6476-computer-vision",
        "text": " Overview This course provides an introduction to computer vision including: fundamentals of image formation; camera imaging geometry; feature detection and matching; multiview geometry including stereo, motion estimation and tracking; and classification. We\u2019ll develop basic methods for applications that include finding known models in images, depth recovery from stereo, camera calibration, image stabilization, automated alignment (e.g. panoramas), tracking, and action recognition. The focus of the course is to develop the intuitions and mathematics of the methods in lecture, and then to learn about the difference between theory and practice in the problem sets. All algorithms work perfectly in the slides. But remember what Yogi Berra said: In theory there is no difference between theory and practice. In practice there is. (Einstein said something similar but who knows more about real life?) In general we will not make use of image and vision libraries until first understanding (and often coding) the basic methods. You should be comfortable writing code that reflects mathematics, coding a variety of data structures, and comparing them to evaluate different hypotheses. Preview Sample Syllabi Spring 2024 syllabus Fall 2022 syllabus Fall 2021 syllabus Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Students should have a working knowledge of Python for doing mathematical programming. All assignments will be in Python using the OpenCV system as the backend. For those familiar with programming in general, they should be able to pick it up on their own. However, it should be emphasized that this course is not about learning to program, but using programming to experiment with Computer Vision concepts. This course has more math than many CS courses: linear algebra, vector calculus, linear algebra, probability, and linear algebra. (Get the hint?) No prior knowledge of vision is assumed. Some experience with programming with images is helpful. Experience with any image/signal processing will also be informative. If you answer \"no\" to any of the following questions, it may be beneficial to refresh your knowledge of some material prior to taking CS 6476: Do you remember what a Gaussian distribution is and what its parametric form looks like? If you had a 2D array of numbers and you wanted to compute the derivative in the x direction, could you do that? How about the magnitude of the \u201cgradient\u201d? If you had to draw a line on an image with your own code, could you do that (ie no libraries)? If you wanted to convert a color image into a monochrome version (gray scale), would you know how to compute it? Are you comfortable with code that works in theory but in practice the results are poorer than you expect? And do you enjoy fiddling (that\u2019s the technical term) with parameters of your algorithm to get it to work on real images? Technical Requirements and Software At least 32GB of available disk space and ability to install additional (free) software. For course projects, you will need to install the Oracle VirtualBox VM and run a Linux virtual machine that contains the setup for the project. Although it is possible to install the software for the projects natively in Linux, such a setup will not be supported. Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6515: Intro to\u00a0Graduate Algorithms",
        "href": "cs-6515-intro-graduate-algorithms",
        "text": " Overview This course is a graduate-level course in the design and analysis of algorithms. We study techniques for the design of algorithms (such as dynamic programming) and algorithms for fundamental problems (such as fast Fourier transform FFT). In addition, we study computational intractability, specifically, the theory of NP-completeness. The main topics covered in the course include: dynamic programming; divide and conquer, including FFT; randomized algorithms, including RSA cryptosystem;\u00a0 graph algorithms; max-flow algorithms; linear programming; and NP-completeness. Sample Syllabus Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Students are expected to have an undergraduate course on the design and analysis of algorithms. In particular, they should be familiar with basic graph algorithms, including DFS, BFS, and Dijkstra's shortest path algorithm, and basic dynamic programming and divide and conquer algorithms (including solving recurrences). An undergraduate course in discrete mathematics is assumed, and students should be comfortable analyzing the asymptotic running time of algorithms. CS 8001 OLP is a one credit-hour seminar designed to fulfill prerequisites to succeed in CS 6515. More information is available on the CS 8001 Seminars page . Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6601: Artificial Intelligence",
        "href": "cs-6601-artificial-intelligence",
        "text": " Overview Students should be familiar with college-level mathematical concepts (calculus, analytic geometry, linear algebra, and probability) and computer science concepts (algorithms, O notation, data structures). In addition to this, students should have working knowledge of computer programming; the course will focus on using Python for its programming assignments. Sample Syllabi Spring 2024 syllabus (PDF) Fall 2022 syllabus Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge You should have completed undergraduate computer algorithm and data structures courses that cover O notation, time and space constraints. You should have working knowledge of college level mathematics such as calculus, probability, and linear algebra. You will also need to be familiar with Python and be comfortable making modifications to large programs. Please review the following questions, if you answer \u201cno\u201d to any of them you may want to refresh your knowledge or practice the required skills prior to taking the class: Are you comfortable programming in Python, including IPython notebooks? If not, are you comfortable in learning a language within the first week of class? Have you taken several classes that required intensive programming? Have you taken algorithms and data structures courses? Are you prepared to spend at least 9 hours a week on this class? Are you proficient in the basic concepts of linear algebra, probability, and single/multi-variable calculus? Technical Requirements and Software Your system must be able to install the latest release of Python 3.7. Please check the official documentation for more information. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6603: AI, Ethics, and Society",
        "href": "cs-6603-ai-ethics-and-society",
        "text": " Overview Abuse of big data means your worst fears can come true. Being monitored by your employer? Check. Government intrusions into your daily life? Check. Being turned down by college admissions because you are predicted to not donate in 10-20 years? Check. Sounds a bit like the visions in the Minority Report? Alas, machine learning algorithms are already being deployed by industry, government, and yes, even schools to make decisions that impact us in direct ways. Such programs are typically promoted as fair and free of human biases; but humans, humans that make mistakes, are programming, calibrating, and evaluating their performance. Thus resides the problem. How do we therefore design algorithms that effectively deal with the large amounts of data that are used to train them, while ensuring their outcomes aren't, well, misused. In this course, not only will we examine various AI/ML techniques that can be used to counterbalance the potential abuse and misuse of learning from big data, but we will focus on the effects of these technologies on individuals, organizations, and society, paying close attention to what our responsibilities are as computing professionals. Course Goals There are several learning outcomes for the course, based on four primary modules: Module 1 - Data, Individuals, and Society Objective: After completing this module, students will be able to understand the power and impact that analytics and AI/ML have on individuals and society, especially concerning issues such as fairness and bias, ethics, legality, data collection and public use. Module 2 \u2013 The BS of Big Data Objective: After completing this module, students will be able to understand the underlying components of big data, apply basic statistical techniques to data scenarios, and understand the issues faced when learning from big data, ranging from data biases, overfitting, causation vs correlation, etc. Module 3 \u2013 Fairness in AI/ML Objective: After completing this module, students will be able to understand and apply basic AI/ML techniques to data scenarios, with a focus on identifying fairness and bias issues found in the design of decision-making systems. We will work systematically towards understanding technical approaches to current AI/ML applications such as facial recognition, natural language processing, and predictive algorithms, all while being mindful of its social and legal context. Module 4 - Applications and Future Opportunities Objective: After completing this module, students will be able to utilize tools and methods to quantify bias and examine ways to use algorithmic fairness to mitigate this bias, taking into consideration ethical and legal issues associated with it. Students will apply their knowledge of analytics and AI/ML to transform a current biased data-set into a more objective solution. In this class, you will be challenged to broaden your understanding of state-of-the-art AI/ML algorithms and solutions; considering the potential impacts they may have on society. You will have ample opportunity to critically analyze various situations and viewpoints provided in papers, books, on the web, and from your own observations. You will be able to practice your learned knowledge by writing coherent and well- structured critiques of situations and papers, leading and participating in class discussions, and designing your own algorithmic solutions. The issue of data misuse and abuse is not easily solvable; concrete right or wrong answers are not easily determined until after solutions are typically deployed into society. In view of this, you are entitled to your opinions on any topics presented throughout the course, whatever they happen to be. You will not be penalized for your viewpoints; however, you must be able to support your viewpoints and resulting solutions effectively. This means showing that you have actually given your approach to a problem some thought, can discuss its various trade-offs and implications, and can be supportive of other viewpoints, even though your personal views may be different. Sample Syllabus Spring 2024 syllabus (PDF) Fall 2022 syllabus (PDF) Summer 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge This class does not have significant prerequisites before participation. Prior programming experience and working knowledge in Python and Jupyter notebooks is required. Social media presence is required to complete certain portions of module 1. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6675: Advanced Internet Systems and Applications",
        "href": "cs-6675-advanced-internet-systems-and-applications",
        "text": " Overview This course introduces a selection of key cutting-edge technologies in Internet computing systems and technologies. The course covers eight broad categories of topics in advanced Internet systems and technologies: Cloud computing and data centers, Internet Server technologies (e.g., multi-tier application servers, Content Distribution Networks, Key-value stores), Peer to Peer computing, Crowd computing, Internet Search (crawl, indexing, ranking and retrieval), Blockchain and digital cryptocurrency (e.g., Bitcoin and Ethereum), Mobile and edge computing, Big data systems and Intelligent Internet services. For each topic, you will learn the basic concepts, the design principles and fundamentals, as well as the techniques and system optimizations. It does not presuppose any earlier knowledge of the above eight categories of topics. Preview Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Preliminary knowledge about computing and communication networking. Technical Requirements and Software The course project has homework and project components. For Homework, students can choose reading critique or programming. Students are free to choose any programming language they prefer to do the programming option. For course project, it is an innovation driven research or software development. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6747: Advanced Malware Analysis",
        "href": "cs-6747-advanced-malware-analysis",
        "text": " Overview This course covers advanced approaches for detecting the presence of vulnerabilities in binary software, the analysis of malicious software, and explores recent research and unsolved problems in software protection and forensics. The goal of this course is to engage in critical discussion around key research topics in software security and forensics. This course will cover: Binary Program Analysis Principles, Binary Software Security, Software Forensics and Cyber Attack Response. Students will be required to study published research papers from the top-tier academic venues in computer security and cyber forensics. Why take this course?: You are interested in learning the fundamental principles of dissecting malware, vulnerability finding/defense, and cyber attack triage. You want to read cutting-edge research publications on these topics. There is ample scope to publish in this area : This course can prepare you to conduct research in cyber attack forensics and malware analysis. More information is available on the CS 6747 course website . This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Learn and apply the fundamental principles of dissecting malware, vulnerability finding/defense, and cyber attack triage Become aware of limitations of existing defense mechanisms and how to avoid them Study cutting-edge research publications on these topics Engage in critical discussion around key research topics in software security and forensics Propose solutions to open-ended research problems and implement novel prototype solutions Preview Sample Syllabi Summer 2023 syllabus and schedule (PDF) Spring 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 6750: Human-Computer Interaction",
        "href": "cs-6750-human-computer-interaction",
        "text": " Overview This course is an introductory course on human-computer interaction. It does not presuppose any earlier knowledge of human-computer interaction, computer science, or psychology. The class covers three broad categories of topics within human-computer interaction: the principles and characteristics of the interaction between humans and computers; the techniques for designing and evaluating user-centered systems; and current areas of cutting-edge research and development in human-computer interaction. More information is available on the CS 6750 course website . Course Goals There are three broad learning goals for this course. At the end of this course, you will understand: The principles and characteristics of human-computer interaction, such as direct manipulation, usability affordances, and interaction design heuristics. The workflow for designing and evaluating user-centered designs, from needfinding to prototyping to evaluation. The current state of research and development in human-computer interaction, such as augmented reality, wearable devices, and robotics. Connected to those three learning goals are three learning outcomes. The learning outcomes are subsumed under the general learning outcome, \"To design effective interactions between humans and computers\". At the end of this course, you will be able to: Design user interfaces and experiences grounded in known principles of usability and human-computer interaction. Iteratively prototype, evaluate, and improve user-centered designs with user feedback. Apply those skills to open or new areas of development in human-computer interaction. Preview Sample Syllabi Spring 2021 syllabus and schedule Fall 2020 syllabus and schedule Summer 2020 syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge This class does not have significant prerequisites before participation. In lieu of readiness questions, the following bullet points describe the tasks you will complete as part of this class; you may use this description of tasks to evaluate your readiness to take this class. In this class, you will: Analyze and evaluate user interfaces, both ones that we provide and ones that you go out and find on your own. Conduct needfinding exercises to uncover problems that can be address through HCI methods. Prototype user interfaces based on principles you learn within class in response to those needs. Evaluate your user interfaces based on feedback you receive from potential users. Revise your user interfaces accordingly and iterate on the prototyping process. Apply those principles to an emerging area of HCI. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. 2+ Mbps is recommended. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution will work so long as you can install Python and OpenCV Virtual Machine: You will be provided a virtual machine (VM) useful for performing class assignments and projects. For the projects, the supplied resources are identical to those used to test your submissions. Details for downloading and installing the VM can be found on Canvas.\u200b Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "*CS 6795: Introduction to Cognitive Science",
        "href": "cs-6795-introduction-cognitive-science",
        "text": " Overview Cognitive science is an interdisciplinary study of mind and intelligence lying at the intersection of artificial intelligence, psychology, neurobiology, education, linguistics, anthropology, and philosophy. In this course, students are introduced to the basic concepts, hypotheses, models, methods, issues, and debates in cognitive science. The course will cover the main information-processing paradigms in cognitive science as well as the main critiques of the paradigms. The knowledge and understanding acquired through this course will inform students' subsequent work in human-centered computing, information system design, digital media, educational technology, design computing, human-robot reaction, and more. Course Goals Cognitive science is an interdisciplinary study of mind and intelligence. The core question is how does the mind work? Cognitive science lies at the intersection of computer science (especially artificial intelligence), psychology, biology (especially neurobiology), education, linguistics, anthropology, and philosophy. The main learning goal of the course is an introduction to the basic concepts, hypotheses, models, methods, issues, and debates in cognitive science. Specific objectives include: Introduction to the main information-processing paradigms in cognitive science as well as the main critiques of the paradigms, Introduction to the central questions, topics, themes, and perspectives that drive the study of cognitive science, including their historical development, Understanding the variety of methodologies used to explore cognitive science, including the capabilities and limitations of different research methods, and Learning about the relationship between cognitive science and computing, including human-centered computing, robotics, design, and educational technology. Sample Syllabus Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge This class does not have significant prerequisites before participation. In lieu of readiness questions, the following bullet points describe the tasks you will complete as part of this class; you may use this description of tasks to evaluate your readiness to take this class. In this class, you will: Understand and participate in scholarly conversations on cognitive science. Read and understand cognitive science papers. Analyze and address problems in computing from a cognitive science perspective, especially in human-centered computing, information system design, educational technology, design informatics, human-robot interaction, etc. Use an interactive modeling tool to construct a model of a complex ecological system and reflect on how scientific knowledge and discoveries are made. Build a computational \u201cproof-of-concept\u201d system for a proposed task and critique the model from the perspective of cognitive science. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7210: Distributed Computing",
        "href": "cs-7210-distributed-computing",
        "text": " Overview This course will cover both fundamental concepts in distributed computing and discuss system designs enabling distributed applications. The objectives of the course include: In-depth understanding of core concepts of distributed computing, including study of both abstract concepts and practical techniques for building system support for distributed applications; construction of distributed system components by doing project work; and understanding of the current state of the art in several areas of distributed systems. Course Goals There are several learning outcomes of this course, centered around the following main topics: Distributed systems concepts, protocols and mechanisms : Upon successful completion of this course, students will be able to understand the core concepts in distributed computing, such as logical clocks, consistent cuts, consensus, replication and fault tolerance, etc., as well as the common techniques to implement them, so as to build correct and performant distributed systems and applications. State-of-the-art developments in distributed systems : Upon successful completion of this course, students will be familiar with multiple practical distributed systems which underpin popular real-world distributed applications and services and will be able to understand how such systems are realized by relying on core distributed computing concepts. Interplay of emerging technologies and paradigms and distributed systems : Upon successful completion of this course, students will be able to understand how emerging technology trends concerning new hardware and applications, influence the designs and implementations of distributed systems. Practical experience with implementing distributed computing techniques : Upon successful completion of this course, students will be able to solve distributed computing problems and to develop distributed services and applications, by gaining practical experience through a series of programming assignments. Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge No pre-requisites are enforced. However, you are expected to enter the course with graduate-level understanding of computer systems and/or computer networking, such as you would receive from CS6200, CS6210, or CS6250. Technical Requirements and Software High-speed Internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 2 GB of RAM Windows for PC computers OR Mac iOS for Apple computers. Complete Microsoft Office Suite or comparable and ability to use Adobe PDF software (install, download, open and convert) Mozilla Firefox, Chrome and/or Safari browsers ( Note: HonorLock requires students to use Chrome ) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7280: Network Science",
        "href": "cs-7280-network-science",
        "text": " Overview It is often the case that complex systems , both living and man-made, can be represented as static or dynamic networks of many interacting components. These components are typically much simpler in terms of behavior or function than the overall system, implying that the additional complexity of the latter is an emergent network property . Network science is a relatively new discipline that investigates the topology and dynamics of such complex networks, aiming to better understand the behavior, function and properties of the underlying systems. The applications of network science cover physical, informational, biological, cognitive, and social systems. In this course, we will study algorithmic, computational, and statistical methods of network science, as well as various applications in social, communication and biological networks. A significant component of the course will focus on the overlap between machine learning and network science, covering methods for network inference, generative network models, graph embeddings using deep neural networks, and other state of the art topics. Course Goals Understand what \"network science\"\u00a0means, how it relates to other disciplines (graph theory, data mining, machine learning,\u00a0etc), and how it is useful in practice Learn how to detect, quantify and interpret important properties of real networks, such as power-law degree distribution, \"small world\"\u00a0efficiency and clustering,\u00a0assortativity, hierarchy, modularity and others Learn how to identify the most important nodes and links in a network through network centrality metrics and core identification algorithms Design and analyze algorithms that compute \"communities\"\u00a0of highly clustered nodes, and learn how to compare such algorithms Appreciate the value of network modeling, and learn several approaches to model a static or dynamic network Understand the \"network inference\"\u00a0problem and learn statistical and machine learning methods that estimate a network from noisy data Understand how representation learning (and deep learning in particular) is applied to network science Learn how to model and predict network epidemics, influence, cascades and other \"spreading\"\u00a0phenomena Understand how the structure (topology) of a network affects the function and dynamic activity on that network Become familiar with several state-of-the-art research directions in network science Sample Syllabus Current syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge The course hopes to attract students from different academic backgrounds and research interests (including math, physics, engineering, biology, neuroscience or sociology). Consequently, the instructor will try to keep the course as \"self-contained\" as possible. However, some knowledge (at the level of a good undergrad course) with calculus, probability, linear algebra, and programming is necessary. Answering the questions on this prerequisite test will tell you if you are ready to take CS 7280. If you know how to solve these questions, or can do them with some revision of undergraduate-level probability and linear algebra, then you are good to start. Technical Requirements and Software We will be using NetworkX extensively: https://networkx.org Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7470: Mobile & Ubiquitous Computing",
        "href": "cs-7470-mobile-ubiquitous-computing",
        "text": " Overview Mobile and ubiquitous computing are often referred to as the third generation of computing where humans continuously interact not with just one but many computing devices. The latter are thereby embedded into the everyday environment of their users in such a way that users may not even be aware of their interaction with computers. In this class, students will explore this third generation of computing that enables such ubiquitous computing. Students will learn about the technical foundations of sensing, computing, and communication that are the prerequisite for smooth and seamless interactions in a continuous manner. Based on these foundations, students will work on practical projects that address cutting edge real-world problems and will develop innovative solutions to them through means of mobile and ubiquitous computing. Beyond providing a solid technical foundation for mobile and ubiquitous computing, the course will focus on aspects of how to actually build and deploy mobile and ubiquitous computing systems. Preview Sample Syllabi Spring 2024 syllabus Spring 2022 syllabus Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7632: Game AI",
        "href": "cs-7632-game-ai",
        "text": " Overview Welcome to CS 7632 Game AI. As applied to video game development, Artificial Intelligence serves a different purpose than general AI research. This is due to the fact that general AI is often concerned with finding a correct and/or optimal answer. However, the goal of Game AI is to simply provide a fun gameplay experience. Because of this, Game AI solutions may involve cutting corners, tricking the game player, or otherwise cheating in regard to implementation. Game AI also faces the challenge of limited computational resources as video games involve a lot of subsystems that must work in coordination such as graphics, sound, physics simulation, etc. Game AI is often a lower priority in this list of game features and further motivates the corner cutting strategies. While Game AI generally leverages concepts from classic AI research, you will see that there are many unique implementation strategies for achieving a fun game play experience. The Game AI course covers topics including agent movement, path planning, decision making, goal-oriented behavior, learning, and procedural content generation. Sample Syllabus Example syllabus from previous offering (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge It is strongly recommended that students take CS 6601: Artificial Intelligence prior to taking this course. Students are expected to be familiar with basic computer science concepts such as algorithms and data structures. Students should also have a strong background in software development. Students are not expected to be familiar with the Unity Engine. For those not already familiar with C#, familiarity with a strongly typed object-oriented programming language such as Java is helpful. Technical Requirements and Software The majority of software development is performed with the Unity Engine and the C# programming language. Students need a Windows PC or Mac capable of running Unity. Some assignments may use supplementary tools such as Python. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7637: Knowledge-Based Artificial Intelligence - Cognitive Systems",
        "href": "cs-7637-knowledge-based-artificial-intelligence-cognitive-systems",
        "text": " Overview The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition. The learning goals of the Knowledge-Based AI course are to develop an understanding of (1) the basic architectures, representations and techniques for building knowledge-based AI agents, and (2) issues and methods of knowledge-based AI. The main learning strategies are learning-by-example and learning-by-doing. Thus, the course puts a strong emphasis on homework assignments and programming projects. The course will cover three kinds of topics: core topics such as knowledge representation, planning, constraint satisfaction, case-based reasoning, knowledge revision, incremental concept learning, and explanation-based learning; common tasks such as classification, diagnosis, and design; and advanced topics such as analogical reasoning, visual reasoning, and meta-reasoning. More information is available on the CS 7637 course website . Course Goals The class is organized around three primary learning goals. First, this class teaches the concepts, methods, and prominent issues in knowledge-based artificial intelligence. Second, it teaches the specific skills and abilities needed to apply those concepts to the design of knowledge-based AI agents. Third, it teaches the relationship between knowledge-based artificial intelligence and the study of human cognition. At the conclusion of this class, you will be able to accomplish three primary tasks. First, you will be able to design and implement a knowledge-based artificial intelligence agent that can address a complex task using the methods discussed in the course. Second, you will be able to use this agent to reflect on the process of human cognition. Third, you will be able to use both these practices to address practical problems in multiple domains. Preview Sample Syllabus Fall 2019 syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge A good course on computer programming such as CS 1332 or Udacity\u2019s CS 101 is beneficial for students. An introductory course on Artificial Intelligence, such as Georgia Tech's CS 3600 or CS 6601, is recommended but not required. To succeed in this course, you should be able to answer \u201cyes\u201d to the following four questions: Are you comfortable with computer programming? Are you familiar with concepts of data structures and object-oriented programming, such as inheritance and polymorphism? Are you familiar with concepts of algorithms, such as sorting and searching algorithms? Are you confident with either Java or Python? Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7638: Robotics: AI Techniques",
        "href": "cs-7638-robotics-ai-techniques",
        "text": " Overview In Artificial Intelligence for Robotics, learn from Sebastian Thrun, the leader of Google and Stanford's autonomous driving team, how to program all the major systems of a robotic car. This class will teach students basic methods in Artificial Intelligence, including probabilistic inference, planning and search, localization, tracking, mapping and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars and autonomous vehicles. Students will be expected to complete six problem sets and multiple projects that apply the methods learned in this class. Course Goals Upon successfully completing this course, you will be able to: Implement filters (including histogram, Kalman, and particle filters) in order to localize moving objects whose locations are subject to noise. Implement search algorithms (including Dijkstra's, A*, and Value Iteration) to plan the shortest path from one point to another subject to costs on different types of movement. Implement PID controls to smoothly correct an autonomous robot\u2019s course. Implement path smoothing algorithms to reduce the jaggedness of a robot's path. Implement a SLAM algorithm for a robot moving in at least two dimensions. Preview Course Overview Sample Lesson Sample Syllabi Spring 2024 syllabus (PDF) Fall 2023 syllabus (PDF) Summer 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge You should be able to navigate the command line (terminal) and execute Python scripts. Students should know Python: Working knowledge of Python (built-in data types, declaring/invoking functions/classes, OOP, loop constructs, conditional statements, exception handling, basic debugging skills, understand stack traces and use them to fix code) If you don't have working knowledge of Python, then you should be proficient in another language and be able to learn Python quickly and autonomously (this course assumes you know Python from the start) Check out Georgia Tech's Introduction to Python Programming professional certificate program on edX if you'd like to get up to speed beforehand. Students should also have strong knowledge of probability and linear algebra (see Georgia Tech's Introductory Linear Algebra , Applications of Linear Algebra , and Probability/Random Variables professional certificate programs\u00a0on edX). For prospective students who are unsure if their computer science experience provides sufficient background for this course, the questions below will help gauge preparedness. If you answer \"no\" to any of the following questions, it may be beneficial to refresh your knowledge of this material prior to taking CS 7638: Do you have programming experience, preferably in Python? Do you have a strong understanding of linear algebra (undergraduate level)? Do you have a strong understanding of probability (undergraduate level)? Have you taken any courses (either from your undergraduate studies or MOOCs) in machine learning, computer vision, or robotics? Technical Requirements and Software Browser and connection speed: An up-to-date version of the Chrome browser with Honorlock extension is required for taking exams. We support Mozilla\u00a0Firefox or Microsoft Edge for all other activities.\u00a02+ Mbps connection speed is recommended. Python (version 3.10\u00a0or higher) development environment Operating system: PC: Windows 10\u00a0with latest updates installed Mac: OS X 10.14\u00a0or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed (may need access to Windows/Mac for Honorlock extension on exams) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7639: Cyber-Physical Design and Analysis",
        "href": "cs-7639-cyber-physical-design-and-analysis",
        "text": " Overview Cyber-physical systems are systems comprising both a physical part and a software part, whereby the physical part of the system sends information about itself to the software part, and the software sends information, usually in the form of commands, to the physical part. The development of cyber-physical systems, therefore, requires knowing a mix of competencies relative to physical systems, on the one hand, and software systems, on the other hand. Because physical systems have \"a life of their own\", and they can often harm operators (think airplanes, medical devices, or cars) and/or cost a fortune to repair (think power grid and centrifuges), the development of programs that control these systems cannot rely much on \"trial and error\". This course introduces the tools and models that will allow attendees to develop high confidence in the resulting system's proper operation prior to any operational test. Included are tools for model-based systems engineering, and cyber-physical system verification and validation currently in use by the CPS industry. Numerous examples will be considered, from aerospace, automotive, medical devices, etc. The frequent presence of human operators is also acknowledged and discussed in-depth . Various verification and validation formalisms (formal methods) are described and applied to simple examples. More information can be found on the CS 7639 course website . Sample Syllabus Sample syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7641: Machine Learning",
        "href": "cs-7641-machine-learning",
        "text": " Overview This is a 3-course Machine Learning Series, taught as a dialogue between Professors Charles Isbell (Georgia Tech) and Michael Littman (Brown University). Supervised Learning Supervised Learning is a machine learning task that makes it possible for your phone to recognize your voice, your email to filter spam, and for computers to learn a number of fascinating things. This sort of machine learning task is an important component in all kinds of technologies. From stopping credit card fraud; to finding faces in camera images; to recognizing spoken language - our goal is to give students the skills they need to apply supervised learning to these technologies and interpret their output. This is especially important for solving a range of data science problems. Unsupervised Learning Ever wonder how Netflix can predict what movies you'll like? Or how Amazon knows what you want to buy, before you make a purchase? The answer can be found in Unsupervised Learning. Closely related to pattern recognition, Unsupervised Learning is about analyzing data and looking for patterns. It is an extremely powerful tool for identifying structure in data. This course focuses on how students can use Unsupervised Learning approaches - including randomized optimization, clustering, and feature selection and transformation - to find structure in unlabeled data. Reinforcement Learning Reinforcement Learning is the area of Machine Learning concerned with the actions that software agents ought to take in a particular environment in order to maximize rewards. You can apply Reinforcement Learning to robot control, chess, backgammon, checkers and other activities that a software agent can learn. Reinforcement Learning uses behaviorist psychology in order to achieve reward maximization. Preview Course Overview Sample Lesson Sample Syllabus Spring 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Spring 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge An introductory course in artificial intelligence is recommended but not required. To discover whether you are ready to take CS 7641: Machine Learning, please review our Course Preparedness Questions , to determine whether another introductory course may be necessary prior to registration. Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7642: Reinforcement Learning",
        "href": "cs-7642-reinforcement-learning",
        "text": " Overview The course explores automated decision-making from a computational perspective through a combination of classic papers and more recent work. It examines efficient algorithms, where they exist, for learning single-agent and multi-agent behavioral policies and approaches to learning near-optimal decisions from experience. Topics include Markov decision processes, stochastic and repeated games, partially observable Markov decision processes, reinforcement learning, deep reinforcement learning, and multi-agent deep reinforcement learning. Of particular interest will be issues of generalization, exploration, and representation. We will cover these topics through lecture videos, paper readings, and the book Reinforcement Learning by Sutton and Barto. Students will replicate a result in a published paper in the area and work on more complex environments, such as those found in the OpenAI Gym library. Additionally, students will train agents to solve a more complex, multi-agent environment, namely the Google Research Football environment, and will have an opportunity to develop state-of-the-art or novel techniques. The ability to run Docker locally or utilize a cloud computing service is strongly recommended. The instructional staff will not provide technical support or cloud computing credits. Preview Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Successful completion of \u201cCS 7641: Machine Learning\u201d is strongly recommended, especially understanding neural networks. Students should also be familiar with or willing to learn: Linear Algebra, Calculus, and Statistics Scientific computing on Python using NumPy Training and evaluating neural networks using PyTorch Using Jupyter notebooks to experiment with algorithms Using MatPlotLib or other visualization software to create graphs Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: Ubuntu Linux 20.04 or higher is recommended PC: Windows XP or higher with the latest updates installed, or Mac: OS X 10.6 or higher with the latest updates installed will be required for the final exam CPU: An x86-64 CPU (Intel or AMD) is strongly recommended, as specific scientific computing packages may not have ARM native code. It will be up to you to set up a suitable environment to conduct your experiments if you use an ARM-based processor, which may require obtaining a cloud instance with enough compute power to run these experiments at your sole cost. (Optional but strongly recommended) We will provide you with a Dockerfile that contains a suitable setup to do RL research. To run this environment, you will need at least 50GB of open hard disk space, 8GB of RAM. A CUDA-compatible GPU is recommended. The teaching staff will provide this file during the course. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7643: Deep Learning",
        "href": "cs-7643-deep-learning",
        "text": " Overview Deep learning is a sub-field of machine learning that focuses on learning complex, hierarchical feature representations from raw data. The dominant method for achieving this, artificial neural networks, has revolutionized the processing of data (e.g. images, videos, text, and audio) as well as decision-making tasks (e.g. game-playing). Its success has enabled a tremendous amount of practical commercial applications and has had significant impact on society. In this course, students will learn the fundamental principles, underlying mathematics, and implementation details of deep learning. This includes the concepts and methods used to optimize these highly parameterized models (gradient descent and backpropagation, and more generally computation graphs), the modules that make them up (linear, convolution, and pooling layers, activation functions, etc.), and common neural network architectures (convolutional neural networks, recurrent neural networks, etc.). Applications ranging from computer vision to natural language processing, and decision-making (reinforcement learning) will be demonstrated. Through in-depth programming assignments, students will learn how to implement these fundamental building blocks as well as how to put them together using a popular deep learning library, PyTorch. In the final project, students will apply what they have learned to real-world scenarios by exploring these concepts with a problem that they are passionate about. CS 7643, originally created at Georgia Tech five years ago, was rebuilt with the support of Facebook for on-campus students in Spring 2020. Course Goals Describe the major differences between deep learning and other types of machine learning algorithms. Explain the fundamental methods involved in deep learning, including the underlying optimization concepts (gradient descent and backpropagation), typical modules they consist of, and how they can be combined to solve real-world problems. Differentiate between the major types of neural network architectures (multi-layered perceptions, convolutional neural networks, recurrent neural networks, etc.) and what types of problems each is appropriate for. Select or design neural network architectures for new data problems based on their requirements and problem characteristics, and analyze their performance. Describe some of the latest research being conducted in the field and open problems that are yet to be solved. Sample Syllabus Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022\u00a0syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge It is recommended that students have a strong mathematical background (linear algebra, calculus especially taking partial derivatives, and probabilities & statistics) and at least an introductory course in Machine Learning (e.g. equivalent to CS 7641). This should not be your first ML class, and self-study (e.g. online Coursera/Udacity courses) do not count. Strong programming skills (specifically Python) are necessary to complete the assignments. Technical Requirements and Software Computer Hardware and Software High-speed Internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 4\u00a0GB of RAM CUDA compatible GPU is helpful for assignments but not necessary UNIX-like OS experience is recommended (Linux/iOS) Windows/Linux for PC computers OR Mac iOS for Apple computers Complete Microsoft Office Suite or comparable and ability to use Adobe PDF software (install, download, open and convert) Mozilla Firefox, Chrome browser, and/or Safari browsers (Chrome required for on-boarding quiz) Canvas This class will use Canvas to deliver course materials to online students. ALL course materials and quiz/discussion assessments will take place on this platform. Gradescope will be used for submission of assignments and the project. Proctoring Information In order to verify the identity of all GT online students, all online students are required to complete the onboarding quiz that uses Honorlock. Honorlock is utilized for student identity verification and to ensure academic integrity. Honorlock provides student identity verification via facial and ID photos. You may also be asked to scan the room around you. The onboarding quiz will be a practice quiz that will not affect your grade in the course. You can take the onboarding quiz as many times as you want. All potential violations are reviewed by a human. The Honorlock support team is available 24/7. While Honorlock will not require you to create an account, download software, or schedule an appointment in advance, you will need Google Chrome and download the Honorlock Chrome Extension. Information on how to access Honorlock and additional resources are provided below. You can also access Honorlock support at https://honorlock.com/support/ . Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7646: Machine Learning for Trading",
        "href": "cs-7646-machine-learning-trading",
        "text": " Overview This course introduces students to the real world challenges of implementing machine learning based trading strategies including the algorithmic steps from information gathering to market orders. The focus is on how to apply probabilistic machine learning approaches to trading decisions. We consider statistical approaches like linear regression, Q-Learning, KNN, and regression trees and how to apply them to actual stock trading situations. This course is composed of three mini-courses: Mini-course 1: Manipulating Financial Data in Python Mini-course 2: Computational Investing Mini-course 3: Machine Learning Algorithms for Trading More information is available on the CS 7646 course website . Preview Sample Syllabi Spring 2022 syllabus and schedule Fall 2022 syllabus and schedule Summer 2022 syllabus and schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge All types of students are welcome! The ML topics might be \"review\" for CS students, while finance parts will be review for finance students. However, even if you have experience in these topics, you will find that we consider them in a different way than you might have seen before, in particular with an eye towards implementation for trading. If you answer \"no\" to the following questions, it may be beneficial to refresh your knowledge of the prerequisite material prior to taking CS 7646: Do you have a working knowledge of basic statistics, including probability distributions (such as normal and uniform), calculation and differences between mean, media, and mode? Do you understand the difference between geometric mean and arithmetic mean? Do you have strong programming skills? Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 7650: Natural Language Processing",
        "href": "cs-7650-natural-language-processing",
        "text": " Overview This course gives an overview of modern data-driven techniques for natural language processing. The course moves from shallow bag-of-words models to richer structural representations of how words interact to create meaning, including language models. At each level, we will discuss the salient linguistic phenomena and most successful computational models. Along the way we will cover machine learning techniques which are especially relevant to natural language processing. Course Goals Natural language processing (NLP) seeks to endow computers with the ability to intelligently process human language. NLP components are used in conversational agents and other systems that engage in dialogue with humans, automatic translation between human languages, automatic answering of questions using large text collections, the extraction of structured information from text, tools that help human authors, and many, many more. This course will teach you the fundamental ideas used in key NLP components as well as current state-of-the-art practice in developing NLP algorithms. By the end of the course students should: Be able to implement a variety of commonly used algorithms for natural language text processing including statistical approaches and neural network approaches. Be able to implement solutions to common natural language text processing problems including text classification, text generation, dialogue, language translation, and document retrieval. Be able to analyze the statistical properties of text documents. Understand the significance of different algorithms, why they were developed, and when they should be used. Before Taking This Class... Suggested Background Knowledge A course in data structures A course in introductory artificial intelligence or machine learning Technical Requirements and Software Proficiency in Python Students will be advised to purchase a Google Colab\u00a0Pro account, though not strictly necessary. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O08: Compilers - Theory and Practice",
        "href": "cs-8803-o08-compilers-theory-and-practice",
        "text": " Overview The objective of this course is to learn the theory and practice behind building automatic translators (compilers) for higher level programming languages and to engineer and build key phases of a compiler in Java or C++ for a small language. Topics Front End: Compiler phases and overall working, Scanners (Regular Expressions, NFA/DFA, Scanner Generators), Parsers (Grammars, Ambiguity Removal, LL, LR, and other deterministic parsing), Semantic Analysis (Symbol Tables, Syntax Driven Analysis, Type Systems, Attribute Grammars) Middle End: Intermediate Forms, Syntax Directed Translation, Translation of: Expressions, Control Structures and Back-patching, Function and Procedure Calls, Runtime Organization Back-end: Instruction Selection, Register Allocation, Instruction Selection, Code layout and Code Generation, Brief Introduction to Code Optimizations Sample Syllabus Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Good knowledge of data structures and algorithms, good programming skills, and ability to write sizeable software in Java or C++. Should be able to work in Linux environment. Technical Requirements and Software Students will work in a Linux environment. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O13: Quantum Computing",
        "href": "cs-8803-o13-quantum-computing",
        "text": " Overview Quantum computing promises exponential speedups for a class of important problems. Quantum computers with dozen(s) of qubits have already been demonstrated, and qubit counts expected to cross hundred in the next few years. Quantum Computing is an interdisciplinary field with topics ranging from physical devices (ion trap, superconducting, spin etc.) to error-correction codes (surface code or Shor code) to system & architecture (memory/microarchitecture) to compiler and tools (simulation and programming), to algorithms and applications. The goal of this course is to provide students in CS and ECE with the fundamental background on quantum computing and equip them with the skills to write code and optimize quantum programs on real quantum computers. This course will focus more on the \u201ccomputing\u201d aspects of quantum computing and will be cover the architecture, compiler, and applications of quantum computing for both the near-term (NISQ model of computation) and long-term (fault tolerant quantum computing). Course Goals By the end of this course students will: Become familiar with 1-qubit and 2-qubit gate operations and gain the ability to build simple quantum circuits Become familiar with the concepts of superposition and entanglement and be able to analyze quantum state transformations Understand quantum algorithms (Deutsch-Jozsa, Bernstein Vazirani, Grover, and Shor) and compare effectiveness versus classical algorithms Understand the problem of noise and analyze the effectiveness of simple error correction codes Become familiar with NISQ model of computation, and perform intelligent qubit mapping and error mitigation Sample Syllabi Spring 2024 syllabus (PDF) Fall 2023 syllabus (PDF) Summer 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. 2+ Mbps is recommended. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O15: Introduction to Computer Law",
        "href": "cs-8803-o15-introduction-computer-law",
        "text": " Overview An understanding of certain aspects of the law can help computer scientists contribute more to their enterprise. We will learn about the various types of law that computer scientists may encounter. Students will be exposed to the US legal system, intellectual property, licensing and contracts, and data privacy. In what we believe to be the first of its kind in a computer law course, students will analyze third-party commercial-grade code as a technical expert (witness) might do to support a litigation. At the end of the course, students should be aware of basic legal issues in the computer field and understand when they need advice from a lawyer. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Sample Syllabi Summer 2023 syllabus (PDF) Summer 2023 schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students should have some experience with the Java language and an integrated development environment for the code analysis project. If you wish to learn Java or refresh your skills, you may do so using the following free online course: Introduction to Object-Oriented Programming with Java . Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O16: Digital Health Equity",
        "href": "cs-8803-o16-digital-health-equity",
        "text": " Overview Digital Health Equity introduces individual, interpersonal, and societal influences on health, and how such influences create health disparities. Using this knowledge as a foundation, the course examines how digital health technologies can be designed to achieve health equity, and how the varied influences on health shape access to,\u202futilization\u202fof, and impact of digital health systems. Students will learn how to apply theory, empirical insights, and perspectives from the social, behavioral, and public health sciences in the design and evaluation of digital health systems that address the disproportionate barriers to health and poor health outcomes experienced by marginalized and underserved populations. Foundations of public health will be examined, including prevention and the prevention paradox, public health ethics, behavioral theories, and social determinants of health. Additionally, the course will have a central focus on applying human-centered design concepts to the domain of digital health equity. The course will examine\u202fvarious ways\u202fin which technology can be employed to reduce health disparities, such as thorough education, intervention, and collective action, and discuss the relative effectiveness of these approaches.\u202fThe course includes a mixture of individual and group assignments. Students will complete papers, design assignments, discussion prompts, a debate activity, and a semester-long team project in which they will research a health equity issue, and design a software solution to address that issue. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Sample Syllabus Spring 2023 Syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O17: Global Entrepreneurship",
        "href": "cs-8803-o17-global-entrepreneurship",
        "text": " Overview This course will provide you with real-world, hands-on learning on what it\u2019s like to create a startup. You will learn the language and values of entrepreneurship, and then work to hone your entrepreneurial skills. This course is not about how to write a business plan, nor is it an exercise on how smart you are in a classroom, or how well you do research. Instead, it is a laboratory: you will be getting your hands dirty talking to customers, partners, competitors, as you encounter the chaos and uncertainty of how a startup actually works. It is possible that you may create a startup you wish to pursue. You will learn how to turn a good idea into a great company. You\u2019ll learn how to use a business model to brainstorm each part of a company and the customer development process to get out of the classroom to see whether anyone other than you would want/use your product. You'll participate in these discovery activities. Finally, you\u2019ll see how agile development can help you rapidly iterate your product to build something customers will use and buy. Your startup can be about anything you wish. You're the founder, after all! This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Sample Syllabus Fall 2022 syllabus and schedule (PDF) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O21: GPU Hardware and Software",
        "href": "cs-8803-o21-gpu-hardware-and-software",
        "text": " Overview This course explores the software and hardware aspects of GPU development. Through hands-on projects, you'll gain basic CUDA programming skills, learn optimization techniques, and develop a solid understanding of GPU architecture. Additionally, you'll delve into compiler principles to comprehend software-related GPU issues and read research papers on hardware challenges. By the end, you'll have enhanced your knowledge of compilers, programming, and computer architecture for modern GPUs. Sample Syllabus Spring 2024 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CS 8803 O22: Security Incident Response",
        "href": "cs-8803-o22-security-incident-response",
        "text": " Overview This course provides students with the background information and skill sets necessary to participate in and lead a cyber security incident response effort. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Once completed, the students should have the following capabilities: Understand the foundational tools necessary to have a successful incident response program. Understand modern incident response methods and apply those methods to create an incident response process. Observe suspicious IT behavior and discern malicious activity. Apply methods of containing, eradicating, and responding to an emerging cybersecurity threat. Evaluate performance of a prior incident in order to improve future processes. Sample Syllabi Spring 2024 syllabus (PDF) Fall 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students should have some familiarity with system logs and log analysis tools like Splunk. \u00a0Students should also have an understanding of how computer systems and networks function. Technical Requirements and Software See Georgia Tech's hardware and software requirements. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CSE 6220: Intro to High-Performance Computing",
        "href": "cse-6220-intro-high-performance-computing",
        "text": " Overview This course is a graduate-level introduction to scalable parallel algorithms. \u201cScale\u201d really refers to two things: efficient as the problem size grows, and efficient as the system size (measured in numbers of cores or compute nodes) grows. To really scale your algorithm in both of these senses, you need to be smart about reducing asymptotic complexity the way you\u2019ve done for sequential algorithms since CS 101; but you also need to think about reducing communication and data movement. This course is about the basic algorithmic techniques you\u2019ll need to do so. The techniques you\u2019ll encounter cover the main algorithm design and analysis ideas for three major classes of machines: for multicore and manycore shared memory machines, via the work-span model; for distributed memory machines like clusters and supercomputers, via network models; and for sequential or parallel machines with deep memory hierarchies (e.g., caches). You will see these techniques applied to fundamental problems, like sorting, search on trees and graphs, and linear algebra, among others. The practical aspect of this course is implementing the algorithms and techniques you\u2019ll learn to run on real parallel and distributed systems, so you can check whether what appears to work well in theory also translates into practice. (Programming models you\u2019ll use include OpenMP, MPI, and possibly others.) More information is available on the CSE 6220 course website . Course Goals This course is a graduate-level introduction to parallel computing. Its goal is to give you the foundations to develop, analyze, and implement parallel and locality-efficient algorithms and data structures. Preview Sample Syllabi Spring 2023 Syllabus Spring 2023 Schedule Fall 2022 Syllabus Fall 2022 Schedule Summer 2022 Syllabus Summer 2022 Schedule Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge Please review the course readiness survey for CSE 6220. If you are unable to answer any of them you may want to refresh your knowledge of the area prior to taking this course. It is also recommended that you: Have taken CS 6515: Intro to Grad Algorithms or an undergraduate algorithms class Have programming experience in a \u201clow- level\u201d \u201chigh-level\u201d language like C or C++ (for the programming assignments) Have experience using command line interfaces in *nix environments (e.g., Unix, Linux Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome or Firefox is strongly recommended. We also support Internet Explorer 9 and the desktop versions of Internet Explorer 10 and above (not the metro versions). 2+ Mbps is recommended; the minimum requirement is 0.768 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed We may also elect to provide virtual machines with a standardized environment, though most of the assignments can be completed by directly logging into the HPC resource we will provide via secure shell (ssh). Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CSE 6242: Data and Visual Analytics",
        "href": "cse-6242-data-and-visual-analytics",
        "text": " Overview This course will introduce you to broad classes of techniques and tools for analyzing and visualizing data at scale. It emphasizes how to complement computation and visualization to perform effective analysis. We will cover methods from each side, and hybrid ones that combine the best of both worlds. Students will work in small teams to complete a project exploring novel approaches for interactive data & visual analytics. More information is available on the CSE 6242 course website . Course Goals In this course, you will: Learn visual and computation techniques and tools, for typical data types. Learn how to complement each kind of methods. Gain a breadth of knowledge. Work on real datasets and problems . Learn practical know-how (useful for jobs, research) through significant hands-on programming assignments. Preview Sample Syllabi Spring 2024 syllabus Past syllabi Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge It is recommended that you: Have taken CSE 6040 and did very well in it (for Georgia Tech Analytics students) Have taken CS 1301 (for Georgia Tech Analytics students) Are proficient in at least one high-level programming language (e.g., Python, C++, Java) and are efficient with debugging principles and practices; if you are not, you should instead first take CSE 6040 (for OMS Analytics students) and if needed, CS 1301 and CS 1371. Are confident in your ability to learn multiple tools, skills, and programming languages on the fly. Have basic knowledge of linear algebra, probability, and statistics Technical Requirements and Software 8 GB RAM (16 GB recommended) 512 GB disk (SSD recommended) Dual-core Core i5 (8th generation or better recommended) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CSE 6250: Big Data for Health Informatics",
        "href": "cse-6250-big-data-health-informatics",
        "text": " Overview Data science plays an important role in many industries. In facing massive amounts of heterogeneous data, scalable machine learning and data mining algorithms and systems become extremely important for data scientists. The growth of volume, complexity, and speed in data drives the need for scalable data analytic algorithms and systems. In this course, we study such algorithms and systems in the context of healthcare applications. In healthcare, large amounts of heterogeneous medical data have become available in various healthcare organizations (payers, providers, pharmaceuticals). Those data could be an enabling resource for deriving insights for improving care delivery and reducing waste. The enormity and complexity of these datasets present great challenges in analyses and subsequent applications to a practical clinical environment. In this course, we introduce the characteristics of medical data and associated data mining challenges on dealing with such data. We cover various algorithms and systems for big data analytics. We focus on studying those big data techniques in the context of concrete healthcare analytic applications such as predictive modeling, computational phenotyping, and patient similarity. We also study big data analytic technology: Scalable machine learning algorithms such as online learning and fast similarity search Big data analytic systems including Hadoop family (Hive, Pig, HBase),\u00a0Spark, and Graph DB More information is available on the CSE 6250 course website . Note that the textbook Introduction to Deep Learning for Healthcare by Cao Xiao and Jimeng Sun is required for this course. Preview Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Content To access the public version of this course's content, click here , then log into your Ed Lessons account. If you have not already created an Ed Lessons account, enter your name and email address, then click the activation link sent to your email, then revisit that link. Before Taking This Class... Suggested Background Knowledge CS 7641: Machine Learning course; of particular importance are\u00a0machine learning and data mining concepts such as classification and clustering Proficient programming and system skills in Scala, Python, and Java Proficient knowledge and experience in dealing with data; understanding of the ETL process (recommended skills include SQl, NoSQL such as MongoDB) Minimum grade of C for MATH 3215 or MATH 3225 or ECE 3077 or ISYE 2027 Two of the following: CX 4240: Introduction to Computing for Data Analysis CS 4400: Introduction to Database Systems CX 4242: Data and Visual Analytics Technical Requirements and Software Browser and connection speed: An up-to-date version of Chrome, Firefox, or Internet Explorer is strongly recommended. 2+ Mbps is recommended; the minimum requirement is 1 Mbps download speed. Operating system: PC: Windows XP or higher with latest updates installed Mac: OS X 10.6 or higher with latest updates installed Linux: any recent distribution that has the supported browsers installed Cloud Computing: Amazon Web Service (AWS) or MS Azure Virtual Machine: Docker or other virtual machine will be needed Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "CSE 6742: Modeling, Simulation, and Military Gaming",
        "href": "cse-6742-modeling-simulation-and-military-gaming",
        "text": " Overview Computer modeling and simulation offers a unique perspective on events because of the ability to hold some variables constant and change others, and run a scenario repeatedly searching for underlying themes. This facilitates an understanding of the cumulative impact of seemingly minor events on grand outcomes. Computer simulation has been used as an analytical tool in the natural sciences, business, commerce, government and politics. This course focuses on the creation and application of computer simulations to model strategic international events concerning warfare. The course is project-based, requiring computing and international affairs students to work together in multidisciplinary teams to analyze specific questions utilizing computer-based modeling and simulation tools (largely, but not exclusively \u201cNetLogo\u201d). The students will collaboratively define and evaluate specific questions in international events, formulate hypothesis concerning the resolution of these questions, develop modeling and simulation software to aid in an analysis, and apply the tools to test hypotheses and formulate conclusions from this investigation. The learning objectives will be accomplished in the context of a specific wargame scenario. For example, a team interested in World War I might focus on the German Schlieffen Plan. This was Germany's plan for the invasion of France through Belgium and Luxembourg in 1914, at the beginning of the Great War, that subsequently was halted at the First Battle of the Marne, six\u00a0weeks after the war began. There has been 100 years of debate over the reasons that the plan failed, and this debate continues among scholars today. Through computer simulation the group would replicate the plan (or some portion of the plan) and test a particular explanation given for the plan's failure. Alternatively, student teams could analyze battles from antiquity, the gunpowder age, or the 20th Century. It may also include potential future scenarios, such as the use of anti-satellite weapons in future conflict. Simulations from previous classes included Gaugamela (Alexander the Great vs Darius), Zama (Scipio vs Hannibal), Cannae (Hannibal vs Roman Legions), Bunker Hill, Gettysburg, Tarawa, and the US Marines\u2019 retreat from the Chosin Reservoir (Korean War). This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Upon successful completion of this course, you should be able to: Demonstrate the ability to formulate specific study questions concerning international events and formulate hypothesis that can be tested through experimentation with computer simulation tools. Develop an understanding of the capabilities and limitations of modern modeling and simulation techniques as applied to the analysis of strategic international events. Demonstrate an understanding of accepted methodologies and practices concerning the creation and use of computer simulations to study international events to derive reasoned and justifiable conclusions. Demonstrate an understanding of the underlying models, abstractions, and software realizations used in modern wargame simulations. Demonstrate an understanding of the basic software architecture and elements of modern wargame simulations. Demonstrate the ability to communicate complex concepts to multidisciplinary teams including students from computing and international affairs backgrounds. Demonstrate the ability to understand and incorporate concepts from a different discipline and integrate them in the development and use of wargame simulations. Demonstrate the ability to collect and incorporate data from historical and other records for use in wargame simulation tools. Students will be proficient in basic mathematical skills and be able to formulate problems in international affairs mathematically if appropriate. Use software, process and analyze information, quantitative and qualitative methods. Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Technical Requirements and Software To participate in this class, you need the following computer hardware and software: Broadband Internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 2 GB of RAM Windows for PC computers or Mac iOS for Apple computers. Complete Microsoft Office Suite or comparable applications and ability to use Adobe PDF software (install, download, open and convert) Mozilla Firefox, Chrome and/or Safari browsers Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ECE 8843: Side-Channels and Their Role in Cybersecurity",
        "href": "ece-8843-side-channels-and-their-role-cybersecurity",
        "text": " Overview The primary objective of this course is to provide an in-depth treatment of digital and analog side-channels and their use for attacks and defenses in cyber security. Upon completion of the course, the student will have a high degree of confidence in discussing the fundamental mechanisms of side-channel creation, analysis, and application to various cybersecurity problems, and have competence in considering these mechanisms during software and hardware development. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals As part of this course, students: Will gain an insight into side-channels, how they are created and used in cybersecurity Will learn and practice how to exploit digital and analog side-channels for cybersecurity Will learn and practice how to analyze side-channels for program monitoring and supply chain verification Once completed,\u00a0students should have the following capabilities: A high degree of confidence and competence in discussing the fundamental mechanisms of side-channel creation, analysis A high degree of confidence and competence in applying side-channels to various cybersecurity problems Sample Syllabus Fall 2021 syllabus and schedule (PDF) Spring 2021 syllabus and schedule (PDF) Fall 2020 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Suggested prerequisites are graduate standing and some background in high performance computer architecture (e.g. ECE 4100/6100). Students should also be able to modify existing programs and write new programs in C/C++. Technical Requirements and Software High-speed Internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 2 GB of RAM\u200b Windows for PC computers OR Mac iOS for Apple computers Complete Microsoft Office Suite or comparable and ability to use Adobe PDF software (install, download, open and convert) Mozilla Firefox, Chrome and/or Safari browsers Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "INTA 6450: Data Analytics & Security",
        "href": "inta-6450-data-analytics-and-security",
        "text": " Overview This course explores the foundations of big data and data analytics, including its foundations in computing technology and statistics. It explores the nature of underlying technical challenges and statistical assumptions used to understand relationships in a variety of applied fields, with a focus on the fields of fraud detection and communication monitoring. Engages with the social implications of increased knowledge, surveillance, and behavioral prediction made possible by big data, and the ethical tradeoffs faced. While the course includes an analytics project, no prior technical experience is required. [Update: New Data Analytics Project on Industry Data] The course has a data partnership with the mobile app security company NowSecure. This partnership, which will require students to sign an NDA, allows students to develop and hone their data analytics skills on real world cybersecurity data. NowSecure scans all Android and iOS apps available on public app stores in by performing automated using static, dynamic, interactive and API Security testing code analysis as well as dynamic tooling. The dynamic tools involve running each app through a series of automated actions on actual phone hardware and recording detailed logs and results across a variety of components. INTA 6450 students can choose to complete a course project using data analytics to find new security vulnerabilities and/or patterns in vulnerabilities across real apps. Students will gain detailed, hands-on experience with a fast growing part of cybersecurity - mobile app security. They can potentially find real and important security vulnerabilities affecting the apps installed on millions of devices. Students choosing to work on these projects will have the opportunity to ask questions and get feedback from NowSecure professionals on everything from data definitions to issues, challenges, and extensions related to their project. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Once completed, you should have the following capabilities: Familiarity and exposure Demonstrate familiarity with hardware trends underlying the rise of big data Demonstrate familiarity with software trends underlying the rise of big data List specific links between big data technologies that affect our security as a society Reasoning about computing technology and about models Articulate a strategy for defining and algorithmic finding a specific type of wrongdoing Identify problems that technologies will likely solve in the future Identify problems that technologies likely can't solve in the future Technical execution of code Use R programming language to perform statistical analysis Use Python to find the most common words in a book Use Python\u00a0to query an email database Use Python to algorithmically identify emails of interest Sample Syllabi Spring 2024 syllabus (PDF) Spring 2022 syllabus (PDF) Spring 2021 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Course Videos You can view the lecture videos for this course here . Before Taking This Class... Suggested Background Knowledge This course requires no specific background knowledge. Many students with no programming background and no background in statistics have found this class approachable and learned a lot. At the same time, upper level PhD students in economics and undergrad/masters students in a range of subjects at Georgia Tech who have modest to considerable computing skills have also benefited from the wide-ranging survey of data analytic methods, the open ended project work, and the discussions around how data analytics fit into problems related to security and society. Technical Requirements and Software We do some exercises in R and Python. We host Jupyter notebooks for the students for Python, and we\u2019ve had students run their own R/RStudio installations. The course project is to find \u201cwrongdoing\u201d among the 250k Enron emails. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 6402: Time Series Analysis",
        "href": "isye-6402-time-series-analysis",
        "text": " Overview Time Series Analysis has wide applicability in economic and financial fields but also to geophysics, oceanography, atmospheric science, astronomy, engineering, and many other fields of practice. This course will illustrate time series analysis using many applications from these fields. Course Goals By the end of this class, students will: Learn the widely used time series models such as univariate ARMA/ARIMA modelling, (G)ARCH modeling, and VAR model. Be given fundamental grounding in the use of some widely used tools, but much of the energy of the course is focus on individual investigation and learning. This class is more about the opportunity for individual discovery than it is about mastering a fixed set of techniques. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Preview Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge A sound familiarity with undergraduate or graduate statistics and probability but also basic programming proficiency, linear algebra, and basic calculus. A sound familiarity with linear regression modeling. Technical Requirements and Software Throughout this course, students will be exposed to not only fundamental concepts of time series analysis but also many data examples using the R statistical software. Thus by the end of this course, students will also familiarize with the implementation of time series models using the R statistical software along with interpretation for the results derived from such implementations. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 6420: Bayesian Statistics",
        "href": "isye-6420-bayesian-statistics",
        "text": " Overview This course provides an introduction to Bayesian statistical inference and its applications. More information is available on the ISYE 6420 course website . Course Goals By the end of this course, students will model and infer from Bayesian philosophical perspective. The aim is to make you proficient in the following: Given a real-life data set, to select an appropriate statistical model to conduct inference, to formulate any prior information in terms of probability distributions (priors), and to understand what the conducted inference implies. In addition to understanding concepts and being able to select the right methodology for the problem in hand, the course is aimed at hands on approaches and delivering explicit results. Another aim of this course is for you to build a solid basis for your data modeling skills, so you can continue to learn throughout your career. New techniques will certainly be developed after you graduate, and we want you to be able to pick them up quickly. In addition, when you accumulate more information about the problem in hand, you will be able to coherently incorporate this information and update your inference. The core of Bayesian approach to data modeling is Markov Chain Monte Carlo method. Although you would be exposed to theoretical concepts of MCMC and several step-by-step examples will be discussed, we will not cover the details of mathematics and algorithms under the hood, or deeper mastery of the modeling needed to set up an efficient MCMC chain. We will rely on the expert system provided by WinBUGS/OpenBUGS software. Sample Syllabus Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Spring 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students should have taken introductory courses in probability in statistics. They should also have basic programming proficiency and be comfortable with calculus. Technical Requirements and Software High-speed internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 2 GB of RAM Windows for PC computer or Mac iOS for Apple computers Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 6501: Intro to Analytics Modeling",
        "href": "isye-6501-intro-analytics-modeling",
        "text": " Overview Analytical models are key to understanding data, generating predictions, and making business decisions. Without models, it\u2019s nearly impossible to gain insights from data. In modeling, it\u2019s essential to understand how to choose the right data sets, algorithms, techniques, and formats to solve a particular business problem. In this course, you\u2019ll gain an intuitive understanding of fundamental models and methods of analytics and practice how to implement them using common industry tools like R. You\u2019ll learn about analytics modeling and how to choose the right approach from among the wide range of options in your toolbox. You will learn how to use statistical models and machine learning as well as models for: classification clustering change detection data smoothing validation prediction optimization experimentation decision making This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals The most important thing you can learn from this course is not the memorization of any specific bit of material. Instead, I would like you to learn these skills: Given a business (or other) question, select an appropriate analytics model to answer it, specify the data you will need to solve it, and understand what the model\u2019s solution will and will not provide as an answer. Given someone else\u2019s use of analytics to address a specific business (or other) question, evaluate whether they have used an appropriate model (and appropriate data) and whether their conclusion is reasonable. Another goal of this course is for you to learn how to think though descriptions and usage of new models, so you can continue to learn throughout your career. New techniques will certainly be developed after you graduate, and we want you to be able to pick them up quickly. We will not cover the mathematics and algorithms under the hood, or deeper mastery of the modeling needed to set up the use of the technique. You can acquire those deeper levels of knowledge in elective courses. (In fact, we could spend an entire semester on many of the topics you\u2019ll see in the course.) Sample Syllabi Summer 2023 syllabus and schedule (PDF) Spring 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Probability and statistics Basic programming proficiency Linear algebra Basic calculus A little background in R can also be useful, but it isn\u2019t necessary if you\u2019re willing to learn on the fly. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 6644: Simulation and Modeling for Engineering and Science",
        "href": "isye-6644-simulation-and-modeling-engineering-and-science",
        "text": " Overview This course covers modeling of discrete-event dynamic systems and introduces simulation-based methods for using these models to solve engineering design and analysis problems. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Learn how to develop simulation models and conduct simulation studies. Become familiar with the organization of simulation languages. We will do a great deal of modeling with Arena, a comprehensive simulation package with animation capabilities. Review statistical aspects including input analysis, random variate generation, output analysis, and variance reduction techniques. Preview Sample Syllabi Spring 2024 syllabus (PDF) Spring 2023 syllabus (PDF) Fall 2022 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge You will be expected to come in knowing a bit of basic calculus, probability, and statistics. But do not worry too much \u2013 we will provide bootcamps on that material so as to make the class pretty much self-contained. In addition, this course will involve extensive computer programming, so it would be nice to have at least a little experience in something like Excel, just to bring back the programming memories. Technical Requirements and Software Internet connection (DSL, LAN, or cable connection desirable) R statistical software (free download; see cran.r-project.org ) Arena simulation software (free student download; see www.arenasimulation.com/academic/students ) Adobe Acrobat PDF reader (free download; see https://get.adobe.com/reader/ ) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 6669: Deterministic Optimization",
        "href": "isye-6669-deterministic-optimization",
        "text": " Overview The course will teach basic concepts, models, and algorithms in linear optimization, integer optimization, and convex optimization. The first module of the course is a general overview of key concepts in optimization and associated mathematical background. The second module of the course is on linear optimization, covering modeling techniques, basic polyhedral theory, simplex method, and duality theory. The third module is on nonlinear optimization and convex conic optimization, which is a significant generalization of linear optimization. The fourth and final module is on integer optimization, which augments the previously covered optimization models with the flexibility of integer decision variables. The course blends optimization theory and computation with various applications to modern data analytics. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Learn modeling skills for formulating various analytics problems as linear, convex nonlinear, and integer optimization problems. Learn basic optimization theory including duality theory and convexity theory, which will give the students a deeper understanding of not only how to formulate an optimization model, but also why. Learn fundamental algorithmic schemes for solving linear, nonlinear, and integer optimization problems. Learn computational skills for implementing and solving an optimization problem using modern optimization modeling language and solvers. Sample Syllabus Fall 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Linear Algebra Multivariate Calculus Basic Probability Familiarity with programming in Python Technical Requirements and Software Internet connection (DSL, LAN, or cable connection desirable) PuLP optimization software (free download; see http://www.coin-or.org/PuLP/ -- Windows version and (for Mac users) a Linux version) CVX in Python: CVXOPT, CVXPY software (available at http://cvxopt.org and https://www.cvxpy.org ) CVX in MATLAB: CVX software (available at http://cvxr.com/cvx/ ) Python programming language (free download; see http://www.python.org ). Preferably use the Anaconda distribution ( http://www.anaconda.com ) Adobe Acrobat PDF reader (free download; see https://get.adobe.com/reader/ ) Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "ISYE 8803: Topics on High-Dimensional Data Analytics",
        "href": "isye-8803-topics-high-dimensional-data-analytics",
        "text": " Overview This course focuses on analysis of high-dimensional structured data including profiles, images, and other types of functional data using statistical machine learning. A\u00a0variety\u00a0of topics such as functional data analysis, image processing, multilinear\u00a0algebra\u00a0and tensor analysis, and\u00a0regularization\u00a0in high-dimensional regression and its applications including low rank and sparse learning is\u00a0covered. Optimization methods commonly used in\u00a0statistical\u00a0modeling and machine learning and their computational aspects are\u00a0also discussed. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals By the end of the course, you will: Learn machine learning and statistical methods for image processing and analysis of functional data. Learn a variety of regularization techniques and their applications. Be able to use multilinear algebra and tensor analysis techniques for performing dimension-reduction on a broad range of high-dimensional data. Understand how to use well-known optimization methods to create efficient learning algorithms. Sample Syllabi Summer 2023 syllabus and schedule (PDF) Spring 2023 syllabus and schedule (PDF) Fall 2022 syllabus and schedule (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation.\u200b Before Taking This Class... Suggested Background Knowledge This class assumes knowledge of regression and linear algebra, as well as basic programming knowledge in Python, R,\u00a0or\u00a0Matlab. Technical Requirements and Software High-speed internet connection Laptop or desktop computer with a minimum of a 2 GHz processor and 2 GB of RAM Windows or Mac iOS Complete Microsoft Office Suite or comparable, and ability to use Adobe PDF software (install, download, open, and convert) Mozilla Firefox, Chrome, and/or Safari browsers Matlab and R Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "MGT 6311: Digital Marketing",
        "href": "mgt-6311-digital-marketing",
        "text": " Overview Digital Marketing has evolved from traditional marketing channels (radio, print, television, etc.) to include the online/internet channel and has grown significantly over the past ten years. The pace of new technology development and the ways consumers are interacting with various technologies has also been growing rapidly. Marketing executives are faced with new challenges to determine creative, cost effective ways to create brand awareness, engage their audience, and establish strong brand reputations. Social media and mobile have established new positions in the marketing arsenal alongside more mature online components such as email and search advertising. Assembling the right mix of tactics to support an organization\u2019s overarching marketing strategy while also maximizing efforts through integrated marketing communications poses great opportunities and challenges for large and small businesses alike. Understanding the various components of the online marketing channel at a high level is a necessary prerequisite for leveraging these tactics effectively in an applied environment. This course will explore elements including: Digital marketing strategy Online brand building/storytelling Social media marketing Online lead generation Mobile marketing Digital thought leadership In addition to providing exposure to the tactical components of the online marketing channel, this course will also impart practical knowledge through real-world case examples and presentations from industry practitioners. Much like the field of digital marketing, this course is intended to be interactive with a healthy level of class participation and Q&A. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals The primary goals of this course are to provide awareness of the various marketing strategies and tactics available within the digital channel and an understanding of how they can be applied to achieve strategic business objectives. This course has been designed to be an active learning experience that strikes a balance between providing established frameworks and factual information while also exploring innovative, creative solutions that do not necessarily have a \u201cright\u201d answer or method. The purpose of this approach is to engage you in a way that builds upon your learning in a practical manner that can be applied in real-world business situations. After taking this course, students should be able to: Explain the major components of a digital marketing strategy. Understand the implications of using digital tactics to accomplish various business goals and objectives for both B2B and B2C organizations. Identify the components of each digital marketing tactic and be able to explain how they function within the broader context of marketing. Recognize various digital marketing organizations, news sources, industry thought leaders, and networking channels. Differentiate between the many disciplines/roles within the digital marketing field, both within the agency model and the traditional organization model. Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note: Sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    },
    {
        "name": "PUBP 6725: Information Security Policies",
        "href": "pubp-6725-information-security-policies",
        "text": " Overview This course introduces students to the policy and management aspects of cybersecurity. It is based on the idea that cybersecurity policy can be sorted into three \u201clayers\u201d representing different levels of social organization: individual organization, the national level, and the transnational level. The course is divided into four modules: the first exposes students to basic concepts and definitions regarding policy, governance, and threats; the second deals with cybersecurity policy at the organizational level; the third deals with cybersecurity public policy at the national level; the fourth deals with cyber conflict, policy, and diplomacy at the transnational level. This course situates cybersecurity in the overall Internet ecosystem. Student deliverables include small group projects as well as individually completed quizzes, discussions, and a final term paper. This is a required core course for all tracks in the Online MS in Cybersecurity. This course is not foundational and does not count toward any specializations at present, but it can be counted as a free elective. Course Goals Upon successful completion of this course, students should be able to: Recognize the different governance structures used to promote cybersecurity Identify key cybersecurity policy frameworks and standards (e.g., NIST framework) Write a cybersecurity policy for an organization Analyze and assess the effects of existing and proposed cybersecurity laws and regulations Identify the geopolitical dimension of cyber conflict Recognize the intersections of cybersecurity governance with the governance, standards and operations of the Internet Sample Syllabi Spring 2024 syllabus (PDF) Summer 2023 syllabus (PDF) Spring 2023 syllabus (PDF) Note:\u00a0sample syllabi are provided for informational purposes only. For the most up-to-date information, consult the official course documentation. Before Taking This Class... Suggested Background Knowledge Students will be expected to have a basic understanding of computers and data networking and will be exposed to some technical material regarding internet protocols, vulnerabilities, exploits and incident response, but the primary focus of the course is on the public policy, management and international relations aspects of cybersecurity. As such, prior coursework on institutional or transaction cost economics would be helpful, as would courses or readings on public policy processes and public administration. Students should be able to blend and integrate economic, technical and political modes of analysis. A helpful overview of related issues is provided in the following: National Research Council. 2014. At the Nexus of Cybersecurity and Public Policy: Some Basic Concepts and Issues. Washington, DC: The National Academies Press. https://doi.org/10.17226/18749 Technical Requirements and Software The course does not require any specific software tools nor does it rely on programming skills, although they can be useful in some assignments. Academic Integrity All Georgia Tech students are expected to uphold the Georgia Tech Academic Honor Code . This course may impose additional academic integrity stipulations; consult the official course documentation for more information."
    }
]

import json
import re

# Get course.json data
f = open('courses.json')
data = json.load(f)

# Search data
while(True):

    # Get keyword input
    keyword = input("Keyword: ")
    print('--------')
    if not keyword:
        f.close()
        exit(0)

    for course in data:
        # Keep alpha and numberic chars; Then remove leading, trailing, and multiple spaces
        overview = course['text']
        if keyword in overview:
            print(course['name'])
    print()
    print()

# everything = ''
# for course in data:
#     everything += ' ' + course['text']

# everything = set(re.sub(' +', ' ', re.sub(r"[^\w\d'\s\-]+", '', everything).lower().strip()).split())

# print(everything)

# Closing file
f.close()

















import requests 
from bs4 import BeautifulSoup 
from dataclasses import dataclass
import json
import re

@dataclass
class Course:
    name: str=''
    href: str=''
    text: str=''


# Making a GET request 
r = requests.get('https://omscs.gatech.edu/current-courses') 
  
# Parsing the HTML 
s = BeautifulSoup(r.content, 'html.parser') 

# Find courses
main_body = s.find('div', class_='field field--name-field-multi-body field--type-text-with-summary field--label-hidden field__item')
course_list = main_body.find('ul').find_all('li')

# Create an empty dictionary
courses = []

# Save course information
for li in course_list:
    
    # Find course information
    a = li.find('a', href=True)

    # Ignore courses without web pages
    if not a:
        continue

    # Update course information
    course_name = a.text
    course_href = a['href'][1:]

    # Making a GET request 
    url = 'https://omscs.gatech.edu/' + course_href
    r = requests.get(url) 
    
    # Parsing the HTML 
    s = BeautifulSoup(r.content, 'html.parser') 
    overview = s.find('div', class_='field field--name-field-multi-body field--type-text-with-summary field--label-hidden field__item')

    # Save web page text
    course_text = ''
    for i in overview.stripped_strings:
        course_text += ' ' + i

    # Keep alpha and numberic chars; Then remove leading, trailing, and multiple spaces
    course_text = re.sub(' +', ' ', re.sub(r'[^a-zA-Z0-9 ]+', '', course_text).lower().strip())

    # Add course
    courses.append(Course(course_name, course_href, course_text))

# Store courses in json file
listObj = []
for course in courses:
    listObj.append({
    "name": course.name,
    "href": course.href,
    "text": course.text
    })

# The json file to save the output data   
save_file = open("courses.json", "w")  
json.dump(listObj, save_file, indent = 4)  
save_file.close()  